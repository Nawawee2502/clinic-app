import React, { useState, useEffect } from "react";
import {
    Card,
    CardContent,
    Typography,
    TextField,
    Button,
    Grid,
    Avatar,
    Chip,
    Box,
    Alert,
    CircularProgress,
    Autocomplete
} from "@mui/material";
import {
    Queue as QueueIcon,
    History as HistoryIcon,
    CheckCircle as CheckIcon,
    PersonAdd as PersonAddIcon
} from "@mui/icons-material";

// Import Services
import PatientService from "../../services/patientService";
import QueueService from "../../services/queueService";
import TreatmentService from "../../services/treatmentService";

const PatientReceptionSection = ({
    onRefresh,
    showSnackbar,
    newlyRegisteredPatient,
    onClearNewlyRegistered
}) => {
    const [loading, setLoading] = useState(false);
    const [patientOptions, setPatientOptions] = useState([]);
    const [selectedPatient, setSelectedPatient] = useState(null);
    const [patientLoading, setPatientLoading] = useState(false);
    const [vitalsLoading, setVitalsLoading] = useState(false);

    // Vitals State
    const [vitalsData, setVitalsData] = useState({
        WEIGHT1: '',
        HIGH1: '',  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å HIGHT1 ‡πÄ‡∏õ‡πá‡∏ô HIGH1
        BT1: '',
        BP1: '',
        BP2: '',
        RR1: '',
        PR1: '',
        SPO2: '',
        SYMPTOM: ''
    });

    // ‚úÖ useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    useEffect(() => {
        if (newlyRegisteredPatient) {
            console.log('üéØ Auto selecting newly registered patient:', newlyRegisteredPatient);

            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            setSelectedPatient(newlyRegisteredPatient);
            setPatientOptions([newlyRegisteredPatient]);

            // ‡πÇ‡∏´‡∏•‡∏î Vital Signs ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            loadPatientVitals(newlyRegisteredPatient.HNCODE);

            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            showSnackbar(`‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ${newlyRegisteredPatient.PRENAME}${newlyRegisteredPatient.NAME1} ${newlyRegisteredPatient.SURNAME} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Vital Signs`, 'success');
        }
    }, [newlyRegisteredPatient]);

    // Search patients
    const handleSearchPatients = async (searchTerm) => {
        if (!searchTerm || searchTerm.length === 0) {
            setPatientOptions([]);
            return;
        }

        setPatientLoading(true);
        try {
            const response = await PatientService.searchPatients(searchTerm);

            if (response.success) {
                setPatientOptions(response.data);
            } else {
                showSnackbar('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ: ' + response.message, 'error');
                setPatientOptions([]);
            }
        } catch (error) {
            console.error('Error searching patients:', error);
            showSnackbar('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤', 'error');
            setPatientOptions([]);
        } finally {
            setPatientLoading(false);
        }
    };

    // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: Select patient ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î Vital Signs ‡πÄ‡∏î‡∏¥‡∏°
    const handleSelectPatient = async (patient) => {
        setSelectedPatient(patient);

        // ‚úÖ ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if (newlyRegisteredPatient && patient?.HNCODE === newlyRegisteredPatient.HNCODE) {
            onClearNewlyRegistered();
        }

        if (patient) {
            showSnackbar(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢: ${patient.PRENAME} ${patient.NAME1} ${patient.SURNAME}`, 'success');

            // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Vital Signs ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
            await loadPatientVitals(patient.HNCODE);
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vitals
            setVitalsData({
                WEIGHT1: '',
                HIGH1: '',  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å HIGHT1 ‡πÄ‡∏õ‡πá‡∏ô HIGH1
                BT1: '',
                BP1: '',
                BP2: '',
                RR1: '',
                PR1: '',
                SPO2: '',
                SYMPTOM: ''
            });
        }
    };

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î Vital Signs ‡πÄ‡∏î‡∏¥‡∏°
    const loadPatientVitals = async (hncode) => {
        setVitalsLoading(true);

        try {
            console.log('üîç Loading previous vitals for HN:', hncode);

            // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Patient Service ‡∏Å‡πà‡∏≠‡∏ô
            const patientWithVitals = await PatientService.getPatientWithVitals(hncode);

            if (patientWithVitals && (patientWithVitals.WEIGHT1 || patientWithVitals.HIGH1)) {
                console.log('‚úÖ Found vitals from patient service:', patientWithVitals);

                setVitalsData(prev => ({
                    ...prev,
                    WEIGHT1: patientWithVitals.WEIGHT1 || '',
                    HIGH1: patientWithVitals.HIGH1 || '',  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å HIGHT1 ‡πÄ‡∏õ‡πá‡∏ô HIGH1
                    BT1: patientWithVitals.BT1 || '',
                    BP1: patientWithVitals.BP1 || '',
                    BP2: patientWithVitals.BP2 || '',
                    RR1: patientWithVitals.RR1 || '',
                    PR1: patientWithVitals.PR1 || '',
                    SPO2: patientWithVitals.SPO2 || '',
                    SYMPTOM: '' // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà
                }));

                showSnackbar('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vital Signs ‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'info');
                return;
            }

            // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Treatment Service (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
            try {
                const latestTreatment = await TreatmentService.getLatestTreatmentByHN(hncode);

                if (latestTreatment.success && latestTreatment.data) {
                    console.log('‚úÖ Found vitals from latest treatment:', latestTreatment.data);

                    const treatmentData = latestTreatment.data;
                    setVitalsData(prev => ({
                        ...prev,
                        WEIGHT1: treatmentData.WEIGHT1 || '',
                        HIGH1: treatmentData.HIGH1 || treatmentData.HIGHT1 || '',  // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á format
                        BT1: treatmentData.BT1 || '',
                        BP1: treatmentData.BP1 || '',
                        BP2: treatmentData.BP2 || '',
                        RR1: treatmentData.RR1 || '',
                        PR1: treatmentData.PR1 || '',
                        SPO2: treatmentData.SPO2 || '',
                        SYMPTOM: '' // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°
                    }));

                    showSnackbar('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vital Signs ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'info');
                    return;
                }
            } catch (treatmentError) {
                console.log('‚ö†Ô∏è No treatment data found:', treatmentError.message);
            }

            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢
            console.log('üîç No previous vitals found, starting fresh');
            showSnackbar('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vital Signs ‡πÄ‡∏î‡∏¥‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà', 'warning');

        } catch (error) {
            console.error('‚ùå Error loading patient vitals:', error);
            showSnackbar('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vital Signs ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ', 'error');
        } finally {
            setVitalsLoading(false);
        }
    };

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vitals
    const clearVitalsData = () => {
        setVitalsData({
            WEIGHT1: '',
            HIGH1: '',  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å HIGHT1 ‡πÄ‡∏õ‡πá‡∏ô HIGH1
            BT1: '',
            BP1: '',
            BP2: '',
            RR1: '',
            PR1: '',
            SPO2: '',
            SYMPTOM: ''
        });
        showSnackbar('‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vital Signs ‡πÅ‡∏•‡πâ‡∏ß', 'info');
    };

    // Calculate BMI
    const calculateBMI = (weight, height) => {
        if (!weight || !height) return null;
        const heightM = height / 100;
        const bmi = (weight / (heightM * heightM)).toFixed(1);
        let category = '';

        if (bmi < 18.5) category = '‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå';
        else if (bmi < 25) category = '‡∏õ‡∏Å‡∏ï‡∏¥';
        else if (bmi < 30) category = '‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå';
        else category = '‡∏≠‡πâ‡∏ß‡∏ô';

        return { value: bmi, category };
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Vital Signs ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß + Treatment record
    const handleSaveVitalsAndCreateQueue = async () => {
        if (!selectedPatient) {
            showSnackbar('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏Å‡πà‡∏≠‡∏ô', 'error');
            return;
        }

        const requiredVitals = ['WEIGHT1', 'HIGH1', 'BT1', 'BP1', 'BP2', 'RR1', 'PR1', 'SPO2'];  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å HIGHT1 ‡πÄ‡∏õ‡πá‡∏ô HIGH1
        const missingVitals = requiredVitals.filter(field => !vitalsData[field]);

        if (missingVitals.length > 0) {
            showSnackbar('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vital Signs ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'error');
            return;
        }

        setLoading(true);

        try {
            // Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô
            const queueData = {
                HNCODE: selectedPatient.HNCODE,
                CHIEF_COMPLAINT: vitalsData.SYMPTOM || '‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
                CREATED_BY: 'RECEPTION_SYSTEM'
            };

            console.log('üè• Creating queue first...');
            const queueResponse = await QueueService.createWalkInQueue(queueData);

            if (!queueResponse.success) {
                throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏î‡πâ: ' + queueResponse.message);
            }

            console.log('‚úÖ Queue created:', queueResponse.data);

            // Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á Treatment record ‡∏û‡∏£‡πâ‡∏≠‡∏° Vital Signs
            const vnNumber = TreatmentService.generateVNO();

            const treatmentData = {
                VNO: vnNumber,
                QUEUE_ID: queueResponse.data.QUEUE_ID,
                HNNO: selectedPatient.HNCODE,
                RDATE: new Date().toISOString().split('T')[0],

                // Vital Signs ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
                WEIGHT1: parseFloat(vitalsData.WEIGHT1),
                HIGHT1: parseFloat(vitalsData.HIGH1),  // ‚úÖ ‡πÉ‡∏ä‡πâ HIGH1 ‡πÉ‡∏ô state ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô HIGHT1 ‡πÉ‡∏´‡πâ API
                BT1: parseFloat(vitalsData.BT1),
                BP1: parseInt(vitalsData.BP1),
                BP2: parseInt(vitalsData.BP2),
                RR1: parseInt(vitalsData.RR1),
                PR1: parseInt(vitalsData.PR1),
                SPO2: parseInt(vitalsData.SPO2),
                SYMPTOM: vitalsData.SYMPTOM,

                // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                EMP_CODE: 'DOC001',
                STATUS1: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà'
            };

            console.log('üíä Creating treatment record with vitals...');
            const treatmentResponse = await TreatmentService.createTreatmentWithQueue(treatmentData, queueResponse.data.QUEUE_ID);

            if (!treatmentResponse.success) {
                console.warn('‚ö†Ô∏è Failed to create treatment record, but queue is created');
                showSnackbar(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà ${queueResponse.data.QUEUE_NUMBER} (‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Vital Signs)`, 'warning');
            } else {
                console.log('‚úÖ Treatment record created with vitals');
                const queueNumber = queueResponse.data.QUEUE_NUMBER;
                showSnackbar(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà ${queueNumber} | VN: ${vnNumber} (‡∏û‡∏£‡πâ‡∏≠‡∏° Vital Signs)`, 'success');
            }

            // Step 4: Reset forms
            setVitalsData({
                WEIGHT1: '',
                HIGH1: '',  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å HIGHT1 ‡πÄ‡∏õ‡πá‡∏ô HIGH1
                BT1: '',
                BP1: '',
                BP2: '',
                RR1: '',
                PR1: '',
                SPO2: '',
                SYMPTOM: ''
            });
            setSelectedPatient(null);
            setPatientOptions([]);

            // Refresh data
            onRefresh();

        } catch (error) {
            console.error('Error creating queue with vitals:', error);
            showSnackbar('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, 'error');
        } finally {
            setLoading(false);
        }
    };

    const bmiInfo = calculateBMI(vitalsData.WEIGHT1, vitalsData.HIGHT1);

    return (
        <Card>
            <CardContent>
                {/* Search Section */}
                <Card sx={{ mb: 3, bgcolor: '#f8f9fa' }}>
                    <CardContent>
                        <Typography variant="h6" sx={{ mb: 2, color: '#1976d2' }}>
                            üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
                        </Typography>

                        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô */}
                        {newlyRegisteredPatient && (
                            <Alert severity="success" sx={{ mb: 2, borderRadius: '10px' }}>
                                <Typography variant="body2">
                                    üéâ <strong>‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô:</strong> {newlyRegisteredPatient.PRENAME}{newlyRegisteredPatient.NAME1} {newlyRegisteredPatient.SURNAME} (HN: {newlyRegisteredPatient.HNCODE})
                                </Typography>
                                <Typography variant="body2" sx={{ mt: 1 }}>
                                    ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Vital Signs ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
                                </Typography>
                            </Alert>
                        )}

                        <Autocomplete
                            value={selectedPatient}
                            onChange={(event, newValue) => handleSelectPatient(newValue)}
                            onInputChange={(event, newInputValue) => {
                                handleSearchPatients(newInputValue);
                            }}
                            options={patientOptions}
                            loading={patientLoading}
                            getOptionLabel={(option) => `${option.PRENAME}${option.NAME1} ${option.SURNAME} (HN: ${option.HNCODE})`}
                            isOptionEqualToValue={(option, value) => option.HNCODE === value.HNCODE}
                            renderInput={(params) => (
                                <TextField
                                    {...params}
                                    label="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ HN, ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
                                    sx={{ '& .MuiOutlinedInput-root': { borderRadius: '10px' } }}
                                    InputProps={{
                                        ...params.InputProps,
                                        endAdornment: (
                                            <>
                                                {patientLoading ? <CircularProgress color="inherit" size={20} /> : null}
                                                {params.InputProps.endAdornment}
                                            </>
                                        ),
                                    }}
                                />
                            )}
                            renderOption={(props, option) => (
                                <Box component="li" {...props}>
                                    <Avatar sx={{ mr: 2, bgcolor: '#1976d2' }}>
                                        {option.NAME1.charAt(0)}
                                    </Avatar>
                                    <Box>
                                        <Typography variant="body2" fontWeight="bold">
                                            {option.PRENAME}{option.NAME1} {option.SURNAME}
                                        </Typography>
                                        <Typography variant="caption" color="text.secondary">
                                            HN: {option.HNCODE} ‚Ä¢ ‡∏≠‡∏≤‡∏¢‡∏∏ {option.AGE} ‡∏õ‡∏µ ‚Ä¢ {option.SEX}
                                        </Typography>
                                        <Typography variant="caption" display="block" color="text.secondary">
                                            üì± {option.TEL1}
                                        </Typography>
                                    </Box>
                                </Box>
                            )}
                            noOptionsText="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢"
                            loadingText="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."
                        />

                        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
                        {selectedPatient && (
                            <Box sx={{ mt: 2, p: 2, bgcolor: '#e3f2fd', borderRadius: 2 }}>
                                <Typography variant="body2" color="primary" fontWeight="bold">
                                    ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢: {selectedPatient.PRENAME}{selectedPatient.NAME1} {selectedPatient.SURNAME}
                                </Typography>
                                <Typography variant="caption">
                                    HN: {selectedPatient.HNCODE} ‚Ä¢ ‡∏≠‡∏≤‡∏¢‡∏∏ {selectedPatient.AGE} ‡∏õ‡∏µ ‚Ä¢ {selectedPatient.SEX}
                                </Typography>

                                {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Vitals */}
                                {vitalsLoading && (
                                    <Box sx={{ mt: 1, display: 'flex', alignItems: 'center', gap: 1 }}>
                                        <CircularProgress size={16} />
                                        <Typography variant="caption" color="text.secondary">
                                            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vital Signs ‡πÄ‡∏î‡∏¥‡∏°...
                                        </Typography>
                                    </Box>
                                )}
                            </Box>
                        )}
                    </CardContent>
                </Card>

                {/* Selected Patient + Vitals */}
                {selectedPatient && (
                    <Card>
                        <CardContent>
                            {/* Patient Info */}
                            <Box sx={{ mb: 3, p: 2, bgcolor: '#e3f2fd', borderRadius: 2 }}>
                                <Grid container spacing={2} alignItems="center">
                                    <Grid item>
                                        <Avatar sx={{ width: 60, height: 60, bgcolor: '#1976d2' }}>
                                            {selectedPatient.NAME1.charAt(0)}
                                        </Avatar>
                                    </Grid>
                                    <Grid item xs>
                                        <Typography variant="h6">
                                            {selectedPatient.PRENAME} {selectedPatient.NAME1} {selectedPatient.SURNAME}
                                        </Typography>
                                        <Typography variant="body2" color="text.secondary">
                                            HN: {selectedPatient.HNCODE} ‚Ä¢ ‡∏≠‡∏≤‡∏¢‡∏∏ {selectedPatient.AGE} ‡∏õ‡∏µ ‚Ä¢ {selectedPatient.SEX}
                                        </Typography>
                                        <Typography variant="body2" color="text.secondary">
                                            üì± {selectedPatient.TEL1}
                                        </Typography>
                                    </Grid>
                                </Grid>
                            </Box>

                            {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç */}
                            <Alert severity="info" sx={{ mb: 3, borderRadius: '10px' }}>
                                <Typography variant="body2">
                                    ü©∫ <strong>Vital Signs ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏≠‡∏î‡∏π‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</strong>
                                </Typography>
                                <Typography variant="body2" sx={{ mt: 1, color: 'text.secondary' }}>
                                    üìã ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vital Signs ‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚Ä¢ VN Number ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                </Typography>
                            </Alert>

                            {/* Vital Signs Form */}
                            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                                <Typography variant="h6" sx={{ color: '#1976d2' }}>
                                    ü©∫ Vital Signs (‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ä‡∏µ‡∏û)
                                </Typography>

                                {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                                <Button
                                    variant="outlined"
                                    size="small"
                                    onClick={clearVitalsData}
                                    startIcon={<HistoryIcon />}
                                    sx={{ fontSize: '12px' }}
                                >
                                    ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                                </Button>
                            </Box>

                            <Grid container spacing={2}>
                                <Grid item xs={6} md={3}>
                                    <TextField
                                        label="‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (kg) *"
                                        type="number"
                                        value={vitalsData.WEIGHT1}
                                        onChange={(e) => setVitalsData(prev => ({ ...prev, WEIGHT1: e.target.value }))}
                                        fullWidth
                                        size="small"
                                        inputProps={{ min: 0, max: 1000, step: 0.1 }}
                                        sx={{
                                            '& .MuiOutlinedInput-root': {
                                                borderRadius: '10px',
                                                bgcolor: vitalsData.WEIGHT1 ? '#f0f8ff' : 'inherit'
                                            }
                                        }}
                                    />
                                </Grid>
                                <Grid item xs={6} md={3}>
                                    <TextField
                                        label="‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (cm) *"
                                        type="number"
                                        value={vitalsData.HIGH1}  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å HIGHT1 ‡πÄ‡∏õ‡πá‡∏ô HIGH1
                                        onChange={(e) => setVitalsData(prev => ({ ...prev, HIGH1: e.target.value }))}  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å HIGHT1 ‡πÄ‡∏õ‡πá‡∏ô HIGH1
                                        fullWidth
                                        size="small"
                                        inputProps={{ min: 0, max: 300, step: 0.1 }}
                                        sx={{
                                            '& .MuiOutlinedInput-root': {
                                                borderRadius: '10px',
                                                bgcolor: vitalsData.HIGH1 ? '#f0f8ff' : 'inherit'  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å HIGHT1 ‡πÄ‡∏õ‡πá‡∏ô HIGH1
                                            }
                                        }}
                                    />
                                </Grid>
                                <Grid item xs={6} md={3}>
                                    <TextField
                                        label="‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C) *"
                                        type="number"
                                        value={vitalsData.BT1}
                                        onChange={(e) => setVitalsData(prev => ({ ...prev, BT1: e.target.value }))}
                                        fullWidth
                                        size="small"
                                        inputProps={{ min: 30, max: 45, step: 0.1 }}
                                        sx={{
                                            '& .MuiOutlinedInput-root': {
                                                borderRadius: '10px',
                                                bgcolor: vitalsData.BT1 ? '#f0f8ff' : 'inherit'
                                            }
                                        }}
                                    />
                                </Grid>
                                <Grid item xs={6} md={3}>
                                    <TextField
                                        label="SpO2 (%) *"
                                        type="number"
                                        value={vitalsData.SPO2}
                                        onChange={(e) => setVitalsData(prev => ({ ...prev, SPO2: e.target.value }))}
                                        fullWidth
                                        size="small"
                                        inputProps={{ min: 0, max: 100 }}
                                        sx={{
                                            '& .MuiOutlinedInput-root': {
                                                borderRadius: '10px',
                                                bgcolor: vitalsData.SPO2 ? '#f0f8ff' : 'inherit'
                                            }
                                        }}
                                    />
                                </Grid>
                                <Grid item xs={6} md={3}>
                                    <TextField
                                        label="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ö‡∏ô *"
                                        type="number"
                                        value={vitalsData.BP1}
                                        onChange={(e) => setVitalsData(prev => ({ ...prev, BP1: e.target.value }))}
                                        fullWidth
                                        size="small"
                                        inputProps={{ min: 50, max: 300 }}
                                        sx={{
                                            '& .MuiOutlinedInput-root': {
                                                borderRadius: '10px',
                                                bgcolor: vitalsData.BP1 ? '#f0f8ff' : 'inherit'
                                            }
                                        }}
                                    />
                                </Grid>
                                <Grid item xs={6} md={3}>
                                    <TextField
                                        label="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á *"
                                        type="number"
                                        value={vitalsData.BP2}
                                        onChange={(e) => setVitalsData(prev => ({ ...prev, BP2: e.target.value }))}
                                        fullWidth
                                        size="small"
                                        inputProps={{ min: 30, max: 200 }}
                                        sx={{
                                            '& .MuiOutlinedInput-root': {
                                                borderRadius: '10px',
                                                bgcolor: vitalsData.BP2 ? '#f0f8ff' : 'inherit'
                                            }
                                        }}
                                    />
                                </Grid>
                                <Grid item xs={6} md={3}>
                                    <TextField
                                        label="‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡πÉ‡∏à *"
                                        type="number"
                                        value={vitalsData.RR1}
                                        onChange={(e) => setVitalsData(prev => ({ ...prev, RR1: e.target.value }))}
                                        fullWidth
                                        size="small"
                                        inputProps={{ min: 5, max: 60 }}
                                        sx={{
                                            '& .MuiOutlinedInput-root': {
                                                borderRadius: '10px',
                                                bgcolor: vitalsData.RR1 ? '#f0f8ff' : 'inherit'
                                            }
                                        }}
                                    />
                                </Grid>
                                <Grid item xs={6} md={3}>
                                    <TextField
                                        label="‡∏ä‡∏µ‡∏û‡∏à‡∏£ (bpm) *"
                                        type="number"
                                        value={vitalsData.PR1}
                                        onChange={(e) => setVitalsData(prev => ({ ...prev, PR1: e.target.value }))}
                                        fullWidth
                                        size="small"
                                        inputProps={{ min: 30, max: 200 }}
                                        sx={{
                                            '& .MuiOutlinedInput-root': {
                                                borderRadius: '10px',
                                                bgcolor: vitalsData.PR1 ? '#f0f8ff' : 'inherit'
                                            }
                                        }}
                                    />
                                </Grid>

                                {/* BMI Display */}
                                {bmiInfo && (
                                    <Grid item xs={12}>
                                        <Alert
                                            severity={bmiInfo.category === '‡∏õ‡∏Å‡∏ï‡∏¥' ? 'success' : 'warning'}
                                            sx={{ borderRadius: '10px' }}
                                        >
                                            <Typography variant="body2">
                                                <strong>BMI: {bmiInfo.value}</strong> ({bmiInfo.category})
                                            </Typography>
                                        </Alert>
                                    </Grid>
                                )}

                                <Grid item xs={12}>
                                    <TextField
                                        label="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô / Chief Complaint"
                                        multiline
                                        rows={3}
                                        value={vitalsData.SYMPTOM}
                                        onChange={(e) => setVitalsData(prev => ({ ...prev, SYMPTOM: e.target.value }))}
                                        fullWidth
                                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ..."
                                        sx={{ '& .MuiOutlinedInput-root': { borderRadius: '10px' } }}
                                    />
                                </Grid>

                                <Grid item xs={12} sx={{ textAlign: 'center' }}>
                                    <Button
                                        variant="contained"
                                        size="large"
                                        onClick={handleSaveVitalsAndCreateQueue}
                                        disabled={loading}
                                        startIcon={loading ? <CircularProgress size={20} /> : <QueueIcon />}
                                        sx={{
                                            borderRadius: '10px',
                                            px: 4,
                                            py: 1.5,
                                            fontSize: '18px',
                                            fontWeight: 'bold',
                                            bgcolor: '#4caf50',
                                            '&:hover': { bgcolor: '#45a049' }
                                        }}
                                    >
                                        {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Vital Signs ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß'}
                                    </Button>
                                </Grid>
                            </Grid>
                        </CardContent>
                    </Card>
                )}

                {/* Instructions */}
                {!selectedPatient && (
                    <Alert severity="info" sx={{ borderRadius: '10px' }}>
                        <Typography variant="body1">
                            üìã ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏î‡∏¥‡∏° ‚Üë ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vital Signs ‡πÄ‡∏î‡∏¥‡∏° ‚Üë ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‚Üë ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß<br />
                            ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vital Signs ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                        </Typography>
                    </Alert>
                )}
            </CardContent>
        </Card>
    );
};

export default PatientReceptionSection;