import React, { useState, useEffect } from "react";
import {
  Container,
  Grid,
  TextField,
  Button,
  Card,
  CardContent,
  Typography,
  Avatar,
  InputAdornment,
  MenuItem,
  Divider,
  Box,
  IconButton,
  Alert,
  CircularProgress,
  Snackbar,
  FormControl,
  InputLabel,
  Select,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip
} from "@mui/material";
import SaveIcon from '@mui/icons-material/Save';
import CalendarTodayIcon from '@mui/icons-material/CalendarToday';
import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import EventIcon from '@mui/icons-material/Event';
import PersonIcon from '@mui/icons-material/Person';
import RefreshIcon from '@mui/icons-material/Refresh';

// Import Services
import PatientService from "../../services/patientService";
import TreatmentService from "../../services/treatmentService";

const Appointment = ({ currentPatient }) => {
  const [loading, setLoading] = useState(false);
  const [selectedDate, setSelectedDate] = useState('');
  const [appointmentTime, setAppointmentTime] = useState('');
  const [reason, setReason] = useState('');
  const [notes, setNotes] = useState('');
  const [doctorName, setDoctorName] = useState('');
  const [existingAppointments, setExistingAppointments] = useState([]);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success'
  });

  const monthNames = [
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  ];

  // Load existing appointments for current patient
  useEffect(() => {
    if (currentPatient) {
      loadPatientAppointments();
    }
  }, [currentPatient]);

  const loadPatientAppointments = async () => {
    if (!currentPatient?.HNCODE) return;

    try {
      const response = await PatientService.getPatientAppointments(currentPatient.HNCODE);
      if (response.success) {
        setExistingAppointments(response.data);
      }
    } catch (error) {
      console.error('Error loading appointments:', error);
    }
  };

  const showSnackbar = (message, severity = 'success') => {
    setSnackbar({ open: true, message, severity });
  };

  const handleDateSelect = (fullDate) => {
    setSelectedDate(fullDate);
  };

  const formatThaiDate = (dateString) => {
    const date = new Date(dateString);
    const buddhistYear = date.getFullYear() + 543;
    return `${date.getDate()} ${monthNames[date.getMonth()]} ${buddhistYear}`;
  };

  const handleSaveAppointment = async () => {
    if (!currentPatient) {
      showSnackbar('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢', 'error');
      return;
    }

    if (!selectedDate || !appointmentTime || !reason) {
      showSnackbar('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡πÄ‡∏ß‡∏•‡∏≤, ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•)', 'error');
      return;
    }

    setLoading(true);

    try {
      const appointmentData = {
        APPOINTMENT_DATE: selectedDate,
        APPOINTMENT_TIME: appointmentTime,
        HNCODE: currentPatient.HNCODE,
        PRENAME: currentPatient.PRENAME,
        NAME1: currentPatient.NAME1,
        SURNAME: currentPatient.SURNAME,
        PHONE: currentPatient.TEL1,
        REASON: reason,
        DOCTOR_NAME: doctorName,
        NOTES: notes,
        status: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
      };

      const response = await PatientService.createAppointment(appointmentData);

      if (response.success) {
        showSnackbar(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! VN Number: ${response.data.VN_NUMBER}`, 'success');

        // Reset form
        setSelectedDate('');
        setAppointmentTime('');
        setReason('');
        setNotes('');
        setDoctorName('');

        // Reload appointments
        loadPatientAppointments();
      } else {
        showSnackbar('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ' + response.message, 'error');
      }
    } catch (error) {
      console.error('Error saving appointment:', error);
      showSnackbar('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteAppointment = async (appointmentId) => {
    if (window.confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
      try {
        const response = await PatientService.deleteAppointment(appointmentId);

        if (response.success) {
          showSnackbar('‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
          loadPatientAppointments();
        } else {
          showSnackbar('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ' + response.message, 'error');
        }
      } catch (error) {
        console.error('Error deleting appointment:', error);
        showSnackbar('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢', 'error');
      }
    }
  };

  if (!currentPatient) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Alert severity="warning">
          ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        </Alert>
      </Box>
    );
  }

  return (
    <Box sx={{ mt: 2 }}>
      <Grid container spacing={3}>
        {/* Patient Profile Section */}
        <Grid item xs={12} sm={5}>
          <Card sx={{ p: 3, mb: 3, border: 'none', boxShadow: 3 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
              <PersonIcon color="primary" />
              <Typography variant="h6" color="primary">
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
              </Typography>
            </Box>

            <Grid container spacing={3} alignItems="center">
              <Grid item xs={12} sm={6}>
                <Avatar
                  sx={{ width: 120, height: 120, mx: "auto", bgcolor: '#1976d2', fontSize: '2rem' }}
                >
                  {currentPatient.NAME1?.charAt(0)}
                </Avatar>
                <Box sx={{
                  display: 'flex',
                  flexDirection: 'column',
                  justifyContent: 'center',
                  alignItems: 'center',
                  mt: 2
                }}>
                  <Typography variant="h5" fontWeight="600" sx={{ mb: 1 }}>
                    {currentPatient.PRENAME}{currentPatient.NAME1} {currentPatient.SURNAME}
                  </Typography>
                  <Typography variant="body1" color="text.secondary">
                    ‡∏≠‡∏≤‡∏¢‡∏∏ {currentPatient.AGE} ‡∏õ‡∏µ
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={12} sm={6}>
                <Box sx={{
                  display: 'flex',
                  flexDirection: 'column',
                  height: '100%',
                  justifyContent: 'space-between',
                  gap: 2
                }}>
                  <Typography variant="body1" fontWeight="600" sx={{
                    bgcolor: '#E9F2FF',
                    color: 'black',
                    p: 1,
                    borderRadius: 1,
                    textAlign: 'center'
                  }}>
                    VN: {currentPatient.vnNumber || currentPatient.VNO || 'N/A'}
                  </Typography>
                  <Typography variant="body1" fontWeight="600" sx={{
                    bgcolor: '#E9F2FF',
                    color: 'black',
                    p: 1,
                    borderRadius: 1,
                    textAlign: 'center'
                  }}>
                    HN: {currentPatient.HNCODE}
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center' }}>
                    üì± {currentPatient.TEL1}
                  </Typography>
                </Box>
              </Grid>
            </Grid>
          </Card>

          {/* Existing Appointments */}
          {existingAppointments.length > 0 && (
            <Card sx={{ mb: 3 }}>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                  <EventIcon color="primary" />
                  <Typography variant="h6" color="primary">
                    ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                  </Typography>
                  <IconButton size="small" onClick={loadPatientAppointments}>
                    <RefreshIcon />
                  </IconButton>
                </Box>

                <TableContainer component={Paper} sx={{ maxHeight: 300 }}>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</TableCell>
                        <TableCell>‡πÄ‡∏ß‡∏•‡∏≤</TableCell>
                        <TableCell>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•</TableCell>
                        <TableCell>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableCell>
                        <TableCell>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {existingAppointments.map((appointment, index) => (
                        <TableRow key={appointment.APPOINTMENT_ID || index}>
                          <TableCell>
                            <Typography variant="body2">
                              {formatThaiDate(appointment.APPOINTMENT_DATE)}
                            </Typography>
                          </TableCell>
                          <TableCell>{appointment.APPOINTMENT_TIME}</TableCell>
                          <TableCell>{appointment.REASON}</TableCell>
                          <TableCell>
                            <Chip
                              label={appointment.status || '‡∏£‡∏≠‡∏ô‡∏±‡∏î'}
                              color={appointment.status === '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß' ? 'success' : 'default'}
                              size="small"
                            />
                          </TableCell>
                          <TableCell>
                            <IconButton
                              size="small"
                              color="error"
                              onClick={() => handleDeleteAppointment(appointment.APPOINTMENT_ID)}
                            >
                              <DeleteIcon fontSize="small" />
                            </IconButton>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              </CardContent>
            </Card>
          )}
        </Grid>

        {/* Appointment Form Section */}
        <Grid item xs={12} sm={7}>
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
                <CalendarTodayIcon color="primary" />
                <Typography variant="h6" color="primary">
                  ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
                </Typography>
              </Box>

              {/* Date Selection */}
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <Typography sx={{ fontWeight: "400", fontSize: "16px", mb: 1 }}>
                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î
                  </Typography>
                  <TextField
                    type="date"
                    value={selectedDate}
                    onChange={(e) => handleDateSelect(e.target.value)}
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    sx={{
                      "& .MuiOutlinedInput-root": {
                        borderRadius: "10px",
                      },
                    }}
                    helperText={selectedDate ? `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${formatThaiDate(selectedDate)}` : ''}
                  />
                </Grid>

                <Grid item xs={12} md={6}>
                  <Typography sx={{ fontWeight: "400", fontSize: "16px", mb: 1 }}>
                    ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î
                  </Typography>
                  <TextField
                    type="time"
                    value={appointmentTime}
                    onChange={(e) => setAppointmentTime(e.target.value)}
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    sx={{
                      "& .MuiOutlinedInput-root": {
                        borderRadius: "10px",
                      },
                    }}
                  />
                </Grid>

                <Grid item xs={12} md={6}>
                  <Typography sx={{ fontWeight: "400", fontSize: "16px", mb: 1 }}>
                    ‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏Å‡∏©‡∏≤
                  </Typography>
                  <FormControl fullWidth>
                    <Select
                      value={doctorName}
                      onChange={(e) => setDoctorName(e.target.value)}
                      displayEmpty
                      sx={{ borderRadius: "10px" }}
                    >
                      <MenuItem value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡∏ó‡∏¢‡πå</MenuItem>
                      <MenuItem value="‡∏ô‡∏û.‡∏™‡∏∏‡∏î‡∏≤ ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏î‡∏µ">üë©‚Äç‚öïÔ∏è ‡∏ô‡∏û.‡∏™‡∏∏‡∏î‡∏≤ ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏î‡∏µ</MenuItem>
                      <MenuItem value="‡∏ô‡∏û.‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ">üë®‚Äç‚öïÔ∏è ‡∏ô‡∏û.‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ</MenuItem>
                      <MenuItem value="‡∏ô‡∏û.‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏î‡∏µ">üë©‚Äç‚öïÔ∏è ‡∏ô‡∏û.‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏î‡∏µ</MenuItem>
                      <MenuItem value="‡∏ô‡∏û.‡∏õ‡∏£‡∏∞‡πÄ‡∏™‡∏£‡∏¥‡∏ê ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å">üë®‚Äç‚öïÔ∏è ‡∏ô‡∏û.‡∏õ‡∏£‡∏∞‡πÄ‡∏™‡∏£‡∏¥‡∏ê ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å</MenuItem>
                      <MenuItem value="‡∏ô‡∏û.‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏ô">üë®‚Äç‚öïÔ∏è ‡∏ô‡∏û.‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏ô</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
              </Grid>
            </CardContent>
          </Card>



          {/* Reason and Notes */}
          <Grid container spacing={2}>
            <Grid item xs={12}>
              <Typography sx={{ mb: 1, fontWeight: 500 }}>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î *</Typography>
              <TextField
                fullWidth
                value={reason}
                onChange={(e) => setReason(e.target.value)}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ, ‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°, ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡πÅ‡∏•‡∏õ, ‡∏£‡∏±‡∏ö‡∏¢‡∏≤"
                sx={{
                  '& .MuiOutlinedInput-root': {
                    borderRadius: '10px',
                  },
                }}
              />
            </Grid>

            <Grid item xs={12}>
              <Typography sx={{ mb: 1, fontWeight: 500 }}>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</Typography>
              <TextField
                fullWidth
                multiline
                rows={3}
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î..."
                sx={{
                  '& .MuiOutlinedInput-root': {
                    borderRadius: '10px',
                  },
                }}
              />
            </Grid>
          </Grid>

          {/* Action Buttons */}
          <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
            <Button
              variant="outlined"
              color="error"
              sx={{ minWidth: 100 }}
              onClick={() => {
                setSelectedDate('');
                setAppointmentTime('');
                setReason('');
                setNotes('');
                setDoctorName('');
              }}
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button
              variant="contained"
              startIcon={loading ? <CircularProgress size={20} /> : <SaveIcon />}
              onClick={handleSaveAppointment}
              disabled={loading || !selectedDate || !appointmentTime || !reason}
              sx={{ minWidth: 150 }}
            >
              {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢'}
            </Button>
          </Box>
        </Grid>
      </Grid>

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
      >
        <Alert
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          severity={snackbar.severity}
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default Appointment;