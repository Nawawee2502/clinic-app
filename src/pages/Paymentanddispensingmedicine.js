import React, { useState, useEffect } from "react";
import { useNavigate } from 'react-router-dom';
import {
  Grid,
  Container,
  Tabs,
  Tab,
  Card,
  CardContent,
  Typography,
  Box,
  Button,
  Alert,
  CircularProgress,
  Snackbar,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow
} from "@mui/material";
import { Print as PrintIcon } from "@mui/icons-material";

// Import Services
import PatientService from "../services/patientService";
import TreatmentService from "../services/treatmentService";

// Import Components
import PatientQueueSidebar from "../components/Paymentanddispensingmedicine/PatientQueueSidebar";
import PatientInfoHeader from "../components/Paymentanddispensingmedicine/PatientInfoHeader";
import PaymentSummaryCard from "../components/Paymentanddispensingmedicine/PaymentSummaryCard";
import DrugsTable from "../components/Paymentanddispensingmedicine/DrugsTable";
import LabProceduresTable from "../components/Paymentanddispensingmedicine/LabProceduresTable";

const Paymentanddispensingmedicine = () => {
  const navigate = useNavigate();
  const [tabIndex, setTabIndex] = useState(0);
  const [selectedPatientIndex, setSelectedPatientIndex] = useState(0);
  const [patients, setPatients] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [treatmentData, setTreatmentData] = useState(null);
  const [loadingTreatment, setLoadingTreatment] = useState(false);

  // State р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Бр╣Йр╣Др╕Вр╕гр╕▓р╕Др╕▓
  const [editablePrices, setEditablePrices] = useState({
    labs: [],
    procedures: [],
    drugs: []
  });
  const [editingItem, setEditingItem] = useState({ type: null, index: null });

  // Payment states
  const [paymentData, setPaymentData] = useState({
    paymentMethod: 'р╣Ар╕Зр╕┤р╕Щр╕кр╕Ф',
    receivedAmount: '',
    discount: 0,
    remarks: ''
  });

  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success'
  });

  // р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в
  useEffect(() => {
    loadCompletedPatients();
  }, []);

  // р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓р╣Ар╕бр╕╖р╣Ир╕нр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в
  useEffect(() => {
    if (patients[selectedPatientIndex]) {
      loadTreatmentData(patients[selectedPatientIndex].VNO);
    }
  }, [selectedPatientIndex, patients]);

  const loadCompletedPatients = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await PatientService.getTodayPatientsFromQueue();

      if (response.success) {
        // р╕Бр╕гр╕нр╕Зр╣Гр╕лр╣Йр╣Ар╕лр╕ер╕╖р╕нр╣Ар╕Йр╕Юр╕▓р╕░р╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Чр╕╡р╣Ир╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Кр╕│р╕гр╕░р╣Ар╕Зр╕┤р╕Щ
        const filteredPatients = response.data
          .filter(patient => patient.queueStatus === 'р╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з') // р╣Ар╕Йр╕Юр╕▓р╕░р╕Чр╕╡р╣Ир╕гр╕▒р╕Бр╕йр╕▓р╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з
          .map(patient => ({
            ...patient,
            paymentStatus: 'р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕Кр╕│р╕гр╕░'
          }));

        setPatients(filteredPatients);

        if (filteredPatients.length === 0) {
          setError('р╣Др╕бр╣Ир╕бр╕╡р╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Чр╕╡р╣Ир╕гр╕нр╕Бр╕▓р╕гр╕Кр╕│р╕гр╕░р╣Ар╕Зр╕┤р╕Щ');
        }

        // р╕гр╕╡р╣Ар╕Лр╣Зр╕Х selectedPatientIndex р╕Цр╣Йр╕▓р╕Ир╕│р╕Щр╕зр╕Щр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ер╕Фр╕ер╕З
        if (selectedPatientIndex >= filteredPatients.length) {
          setSelectedPatientIndex(Math.max(0, filteredPatients.length - 1));
        }
      } else {
        setError('р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╣Др╕Фр╣Й: ' + response.message);
      }
    } catch (err) {
      console.error('Error loading patients:', err);
      setError('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕е: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const loadTreatmentData = async (vno) => {
    if (!vno) {
      setTreatmentData(null);
      return;
    }

    try {
      setLoadingTreatment(true);
      const response = await TreatmentService.getTreatmentByVNO(vno);

      if (response.success) {
        setTreatmentData(response.data);

        // р╕кр╕гр╣Йр╕▓р╕З Labs р╣Бр╕ер╕░ Procedures arrays р╕Ир╕▓р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Др╕Фр╣Й
        let labsArray = [];
        let proceduresArray = [];

        // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е Lab/X-ray р╕Ир╕▓р╕Б INVESTIGATION_NOTES (р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╣Гр╕лр╕бр╣И)
        const investigationNotes = response.data.treatment?.INVESTIGATION_NOTES || '';

        if (investigationNotes) {
          console.log('ЁЯУЭ Payment - Loading investigation notes:', investigationNotes);

          // р╣Бр╕вр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е [Laboratory] р╣Бр╕ер╕░ [Imaging] р╕Ир╕▓р╕Б INVESTIGATION_NOTES
          const lines = investigationNotes.split('\n\n');

          lines.forEach(line => {
            if (line.startsWith('[Laboratory]')) {
              const labNote = line.replace('[Laboratory]', '').trim();
              if (labNote) {
                // р╕кр╕гр╣Йр╕▓р╕З lab object р╕Ир╕▓р╕Б note
                labsArray.push({
                  LABNAME: labNote,
                  LABCODE: 'LAB_FROM_NOTE',
                  PRICE: 100, // р╕гр╕▓р╕Др╕▓р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ
                  NOTE1: labNote,
                  editablePrice: 100,
                  originalPrice: 100
                });
              }
            } else if (line.startsWith('[Imaging]')) {
              const imagingNote = line.replace('[Imaging]', '').trim();
              if (imagingNote) {
                // р╕кр╕гр╣Йр╕▓р╕З lab object р╕кр╕│р╕лр╕гр╕▒р╕Ъ X-ray/Imaging
                labsArray.push({
                  LABNAME: imagingNote,
                  LABCODE: 'XRAY_FROM_NOTE',
                  PRICE: 200, // р╕гр╕▓р╕Др╕▓р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ъ X-ray
                  NOTE1: imagingNote,
                  editablePrice: 200,
                  originalPrice: 200
                });
              }
            }
          });
        }

        // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е Lab/X-ray р╕Ир╕▓р╕Бр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╣Ар╕Бр╣Ир╕▓ (р╕кр╕│р╕лр╕гр╕▒р╕Ъ backward compatibility)
        if (response.data.labTests && response.data.labTests.length > 0) {
          const oldLabTests = response.data.labTests.map(item => ({
            ...item,
            editablePrice: parseFloat(item.PRICE || 100),
            originalPrice: parseFloat(item.PRICE || 100)
          }));
          labsArray = [...labsArray, ...oldLabTests];
        }

        // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е radiological tests р╕Ир╕▓р╕Бр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╣Ар╕Бр╣Ир╕▓
        if (response.data.radiologicalTests && response.data.radiologicalTests.length > 0) {
          const oldRadioTests = response.data.radiologicalTests.map(item => ({
            ...item,
            LABNAME: item.RLNAME || item.PROCEDURE_NAME,
            LABCODE: item.RLCODE || item.PROCEDURE_CODE,
            PRICE: item.PRICE || 200,
            editablePrice: parseFloat(item.PRICE || 200),
            originalPrice: parseFloat(item.PRICE || 200)
          }));
          labsArray = [...labsArray, ...oldRadioTests];
        }

        // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е Procedures
        if (response.data.procedures && response.data.procedures.length > 0) {
          proceduresArray = response.data.procedures.map(item => ({
            ...item,
            editablePrice: parseFloat(item.AMT || 200),
            originalPrice: parseFloat(item.AMT || 200)
          }));
        }

        // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е Drugs
        let drugsArray = [];
        if (response.data.drugs && response.data.drugs.length > 0) {
          drugsArray = response.data.drugs.map(item => ({
            ...item,
            editablePrice: parseFloat(item.AMT || 0),
            originalPrice: parseFloat(item.AMT || 0)
          }));
        }

        // р╣Ар╕Лр╣Зр╕Хр╕гр╕▓р╕Др╕▓р╕Чр╕╡р╣Ир╣Бр╕Бр╣Йр╣Др╕Вр╣Др╕Фр╣Й
        setEditablePrices({
          labs: labsArray,
          procedures: proceduresArray,
          drugs: drugsArray
        });

        console.log('ЁЯТ░ Payment - Final editable prices:', {
          labs: labsArray,
          procedures: proceduresArray,
          drugs: drugsArray
        });

      } else {
        setTreatmentData(null);
        setSnackbar({
          open: true,
          message: 'р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓: ' + response.message,
          severity: 'warning'
        });
      }
    } catch (err) {
      console.error('Error loading treatment data:', err);
      setTreatmentData(null);
      setSnackbar({
        open: true,
        message: 'р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓: ' + err.message,
        severity: 'error'
      });
    } finally {
      setLoadingTreatment(false);
    }
  };

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕Вр╕гр╕▓р╕Др╕▓
  const handleEditPrice = (type, index) => {
    setEditingItem({ type, index });
    // р╣Ар╕Лр╣Зр╕Х global function р╣Гр╕лр╣Й EditablePriceCell р╣Гр╕Кр╣Й
    window.editPrice = (type, index) => {
      setEditingItem({ type, index });
    };
  };

  const handleSavePrice = (type, index, newPrice) => {
    const price = parseFloat(newPrice) || 0;

    setEditablePrices(prev => ({
      ...prev,
      [type]: prev[type].map((item, i) =>
        i === index ? { ...item, editablePrice: price } : item
      )
    }));

    setEditingItem({ type: null, index: null });

    setSnackbar({
      open: true,
      message: 'р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕гр╕▓р╕Др╕▓р╣Гр╕лр╕бр╣Ир╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в',
      severity: 'success'
    });
  };

  const handleCancelEdit = () => {
    setEditingItem({ type: null, index: null });
  };

  // р╕Др╕│р╕Щр╕зр╕Ур╕вр╕нр╕Фр╕гр╕зр╕б
  const calculateTotalFromEditablePrices = () => {
    const labTotal = editablePrices.labs.reduce((sum, item) => sum + item.editablePrice, 0);
    const procedureTotal = editablePrices.procedures.reduce((sum, item) => sum + item.editablePrice, 0);
    const drugTotal = editablePrices.drugs.reduce((sum, item) => sum + item.editablePrice, 0);

    return labTotal + procedureTotal + drugTotal;
  };

  const calculateTotal = () => {
    const totalCost = calculateTotalFromEditablePrices();
    const discount = parseFloat(paymentData.discount || 0);
    return Math.max(0, totalCost - discount);
  };

  // р╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в
  const handlePatientSelect = (index) => {
    setSelectedPatientIndex(index);
    setTabIndex(0);
    setPaymentData({
      paymentMethod: 'р╣Ар╕Зр╕┤р╕Щр╕кр╕Ф',
      receivedAmount: '',
      discount: 0,
      remarks: ''
    });
    setEditingItem({ type: null, index: null });
  };

  const handleNextPatient = () => {
    if (selectedPatientIndex < patients.length - 1) {
      setSelectedPatientIndex(selectedPatientIndex + 1);
    }
  };

  const handlePreviousPatient = () => {
    if (selectedPatientIndex > 0) {
      setSelectedPatientIndex(selectedPatientIndex - 1);
    }
  };

  const handlePayment = async () => {
    try {
      if (!treatmentData) {
        setSnackbar({
          open: true,
          message: 'р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓',
          severity: 'error'
        });
        return;
      }

      if (!paymentData.receivedAmount || parseFloat(paymentData.receivedAmount) < calculateTotal()) {
        setSnackbar({
          open: true,
          message: 'р╕Ир╕│р╕Щр╕зр╕Щр╣Ар╕Зр╕┤р╕Щр╕Чр╕╡р╣Ир╕гр╕▒р╕Ър╣Др╕бр╣Ир╣Ар╕Юр╕╡р╕вр╕Зр╕Юр╕н',
          severity: 'error'
        });
        return;
      }

      // р╕ер╕Ър╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Чр╕╡р╣Ир╕Кр╕│р╕гр╕░р╣Ар╕Зр╕┤р╕Щр╣Бр╕ер╣Йр╕зр╕нр╕нр╕Бр╕Ир╕▓р╕Бр╕Др╕┤р╕з
      const currentPatient = patients[selectedPatientIndex];
      const updatedPatients = patients.filter((_, index) => index !== selectedPatientIndex);

      setPatients(updatedPatients);

      // р╕нр╕▒р╕Юр╣Ар╕Фр╕Х selectedPatientIndex
      if (updatedPatients.length === 0) {
        setSelectedPatientIndex(0);
        setTreatmentData(null);
        setEditablePrices({
          labs: [],
          procedures: [],
          drugs: []
        });
      } else {
        // р╕Цр╣Йр╕▓р╕ер╕Ър╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Др╕Щр╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в р╣Гр╕лр╣Йр╣Ар╕ер╕╖р╣Ир╕нр╕Щр╣Др╕Ыр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Др╕Щр╕Бр╣Ир╕нр╕Щр╕лр╕Щр╣Йр╕▓
        if (selectedPatientIndex >= updatedPatients.length) {
          setSelectedPatientIndex(updatedPatients.length - 1);
        }
        // р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╣Гр╕Кр╣И р╣Гр╕лр╣Йр╕нр╕вр╕╣р╣Ир╕Чр╕╡р╣И index р╣Ар╕Фр╕┤р╕б (р╕Ир╕░р╣Бр╕кр╕Фр╕Зр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Др╕Щр╕Цр╕▒р╕Фр╣Др╕Ы)
      }

      setSnackbar({
        open: true,
        message: `р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╕Кр╕│р╕гр╕░р╣Ар╕Зр╕┤р╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И р╕вр╕нр╕Фр╕Кр╕│р╕гр╕░: р╕┐${calculateTotal().toFixed(2)} - ${currentPatient.PRENAME} ${currentPatient.NAME1} ${currentPatient.SURNAME}`,
        severity: 'success'
      });

      // р╕гр╕╡р╣Ар╕Лр╣Зр╕Хр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Кр╕│р╕гр╕░р╣Ар╕Зр╕┤р╕Щ
      setPaymentData({
        paymentMethod: 'р╣Ар╕Зр╕┤р╕Щр╕кр╕Ф',
        receivedAmount: '',
        discount: 0,
        remarks: ''
      });

      setTabIndex(1);
    } catch (error) {
      console.error('Error saving payment:', error);
      setSnackbar({
        open: true,
        message: 'р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╕Кр╕│р╕гр╕░р╣Ар╕Зр╕┤р╕Щ',
        severity: 'error'
      });
    }
  };

  const currentPatient = patients[selectedPatientIndex];

  // Loading state
  if (loading) {
    return (
      <Container maxWidth={false} sx={{ mt: 2, textAlign: 'center' }}>
        <CircularProgress />
        <Typography variant="h6" sx={{ mt: 2 }}>
          р╕Бр╕│р╕ер╕▒р╕Зр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в...
        </Typography>
      </Container>
    );
  }

  // Error state
  if (error) {
    return (
      <Container maxWidth={false} sx={{ mt: 2 }}>
        <Alert severity="error" action={
          <Button color="inherit" size="small" onClick={loadCompletedPatients}>
            р╕ер╕нр╕Зр╣Гр╕лр╕бр╣И
          </Button>
        }>
          {error}
        </Alert>
      </Container>
    );
  }

  return (
    <Container maxWidth={false} sx={{ mt: 2, maxWidth: "1600px" }}>
      {/* Header */}
      <Typography sx={{
        fontWeight: '600',
        fontSize: '24px',
        fontFamily: 'Instrument Sans',
        letterSpacing: '1.5px',
        lineHeight: '2',
        textShadow: '1px 1px 2px rgba(0, 0, 0, 0.1)',
        mb: 3
      }}>
        р╕Кр╕│р╕гр╕░р╣Ар╕Зр╕┤р╕Щ/р╕Ир╣Ир╕▓р╕вр╕вр╕▓
      </Typography>

      <Grid container spacing={2}>
        {/* Left Sidebar - Patient Queue */}
        <Grid item xs={12} md={2.5}>
          <PatientQueueSidebar
            patients={patients}
            selectedPatientIndex={selectedPatientIndex}
            onPatientSelect={handlePatientSelect}
            onNextPatient={handleNextPatient}
            onPreviousPatient={handlePreviousPatient}
            onRefresh={loadCompletedPatients}
          />
        </Grid>

        {/* Main Content Area */}
        <Grid item xs={12} md={9.5}>
          {patients.length === 0 ? (
            <Card>
              <CardContent sx={{ textAlign: 'center', py: 8 }}>
                <Typography variant="h5" color="text.secondary" sx={{ mb: 2 }}>
                  р╣Др╕бр╣Ир╕бр╕╡р╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕гр╕нр╕Бр╕▓р╕гр╕Кр╕│р╕гр╕░р╣Ар╕Зр╕┤р╕Щ
                </Typography>
                <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
                  р╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Чр╕╕р╕Бр╕гр╕▓р╕вр╣Др╕Фр╣Йр╕Кр╕│р╕гр╕░р╣Ар╕Зр╕┤р╕Щр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з р╕лр╕гр╕╖р╕нр╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡р╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Чр╕╡р╣Ир╕гр╕▒р╕Бр╕йр╕▓р╣Ар╕кр╕гр╣Зр╕И
                </Typography>
                <Button
                  variant="contained"
                  size="large"
                  onClick={() => navigate('/clinic/р╕Хр╕гр╕зр╕Ир╕гр╕▒р╕Бр╕йр╕▓')}
                  sx={{ px: 4, py: 1.5 }}
                >
                  р╣Др╕Ыр╕лр╕Щр╣Йр╕▓р╕Хр╕гр╕зр╕Ир╕гр╕▒р╕Бр╕йр╕▓
                </Button>
              </CardContent>
            </Card>
          ) : (
            <Card sx={{ borderRadius: '16px' }}>
              {/* Tabs */}
              <Tabs
                value={tabIndex}
                onChange={(event, newIndex) => setTabIndex(newIndex)}
                variant="standard"
                sx={{
                  backgroundColor: 'transparent',
                  backgroundImage: 'linear-gradient(135deg, #5698E0 0%, #2B69AC 100%)',
                  borderRadius: '16px',
                  padding: '12px',
                  boxShadow: '0 8px 32px rgba(86, 152, 224, 0.25)',
                  border: '1px solid rgba(255, 255, 255, 0.2)',
                  backdropFilter: 'blur(10px)',
                  mb: 2,
                  '& .MuiTabs-flexContainer': {
                    gap: '12px',
                    justifyContent: 'flex-start',
                    alignItems: 'stretch'
                  },
                  '& .MuiTab-root': {
                    color: 'rgba(255, 255, 255, 0.85)',
                    fontWeight: 600,
                    fontSize: '14px',
                    textAlign: 'center',
                    minWidth: 160,
                    maxWidth: 200,
                    borderRadius: '14px',
                    padding: '16px 20px',
                    textTransform: 'none',
                    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                    background: 'rgba(255, 255, 255, 0.1)',
                    backdropFilter: 'blur(10px)',
                    border: '1px solid rgba(255, 255, 255, 0.25)',
                    '&:hover': {
                      background: 'rgba(255, 255, 255, 0.2)',
                      color: 'white',
                      transform: 'translateY(-2px)',
                      boxShadow: '0 12px 30px rgba(0, 0, 0, 0.2)'
                    }
                  },
                  '& .Mui-selected': {
                    background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%) !important',
                    color: '#2B69AC !important',
                    fontWeight: '700 !important',
                    transform: 'translateY(-3px)',
                    boxShadow: '0 12px 35px rgba(255, 255, 255, 0.5), inset 0 1px 0 rgba(255, 255, 255, 0.8)',
                    border: '1px solid rgba(255, 255, 255, 0.9)'
                  },
                  '& .MuiTabs-indicator': {
                    display: 'none'
                  }
                }}
              >
                <Tab label="ЁЯТ░ р╕Кр╕│р╕гр╕░р╣Ар╕Зр╕┤р╕Щ/р╕Ир╣Ир╕▓р╕вр╕вр╕▓" />
                <Tab label="ЁЯз╛ р╣Гр╕Ър╣Ар╕кр╕гр╣Зр╕И" />
                <Tab label="ЁЯТК р╕Йр╕ер╕▓р╕Бр╕вр╕▓" />
              </Tabs>

              <CardContent>
                {/* Tab 0: Payment */}
                {tabIndex === 0 && (
                  <Grid container spacing={3}>
                    {/* Patient Info Header */}
                    {currentPatient && (
                      <Grid item xs={12}>
                        <PatientInfoHeader patient={currentPatient} />
                      </Grid>
                    )}

                    {/* Treatment Details */}
                    <Grid item xs={12}>
                      {loadingTreatment ? (
                        <Box sx={{ textAlign: 'center', py: 8 }}>
                          <CircularProgress size={60} sx={{ color: '#5698E0' }} />
                          <Typography variant="h6" sx={{ mt: 2, color: '#2B69AC' }}>р╕Бр╕│р╕ер╕▒р╕Зр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓...</Typography>
                        </Box>
                      ) : treatmentData ? (
                        <Box>
                          {/* Lab & Procedures + Payment Summary */}
                          <Grid container spacing={3} sx={{ mb: 4 }}>
                            <Grid item xs={12} lg={8}>
                              <LabProceduresTable
                                editablePrices={editablePrices}
                                editingItem={editingItem}
                                onEditPrice={handleEditPrice}
                                onSavePrice={handleSavePrice}
                                onCancelEdit={handleCancelEdit}
                              />
                            </Grid>
                            <Grid item xs={12} lg={4}>
                              <PaymentSummaryCard
                                editablePrices={editablePrices}
                                paymentData={paymentData}
                                onPaymentDataChange={setPaymentData}
                                onPayment={handlePayment}
                                loading={false}
                              />
                            </Grid>
                          </Grid>

                          {/* Drugs Table */}
                          <DrugsTable
                            editablePrices={editablePrices}
                            editingItem={editingItem}
                            onEditPrice={handleEditPrice}
                            onSavePrice={handleSavePrice}
                            onCancelEdit={handleCancelEdit}
                          />

                          {/* Print Buttons */}
                          <Card elevation={2} sx={{ borderRadius: '12px', bgcolor: '#f8f9fa' }}>
                            <CardContent>
                              <Typography variant="h6" sx={{ mb: 3, textAlign: 'center', color: '#2B69AC' }}>
                                ЁЯЦия╕П р╕Бр╕▓р╕гр╕Юр╕┤р╕бр╕Юр╣Мр╣Ар╕нр╕Бр╕кр╕▓р╕г
                              </Typography>
                              <Box sx={{ display: "flex", justifyContent: "center", gap: 3, flexWrap: 'wrap' }}>
                                <Button
                                  variant="contained"
                                  startIcon={<span>ЁЯз╛</span>}
                                  onClick={() => setTabIndex(1)}
                                  disabled={calculateTotalFromEditablePrices() === 0}
                                  sx={{
                                    backgroundColor: "#5698E0",
                                    height: 48,
                                    minWidth: 160,
                                    borderRadius: 3,
                                    fontSize: '1rem',
                                    fontWeight: 600,
                                    '&:hover': { backgroundColor: "#2B69AC" }
                                  }}
                                >
                                  р╕Юр╕┤р╕бр╕Юр╣Мр╣Гр╕Ър╣Ар╕кр╕гр╣Зр╕И
                                </Button>

                                <Button
                                  variant="contained"
                                  startIcon={<span>ЁЯТК</span>}
                                  onClick={() => setTabIndex(2)}
                                  disabled={editablePrices.drugs.length === 0}
                                  sx={{
                                    backgroundColor: "#2B69AC",
                                    height: 48,
                                    minWidth: 160,
                                    borderRadius: 3,
                                    fontSize: '1rem',
                                    fontWeight: 600,
                                    '&:hover': { backgroundColor: "#1e5a94" }
                                  }}
                                >
                                  р╕Юр╕┤р╕бр╕Юр╣Мр╕Йр╕ер╕▓р╕Бр╕вр╕▓
                                </Button>
                              </Box>
                            </CardContent>
                          </Card>
                        </Box>
                      ) : (
                        <Alert severity="warning" sx={{ borderRadius: '12px', p: 3 }}>
                          {currentPatient ? 'р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕гр╕▓р╕вр╕Щр╕╡р╣Й' : 'р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Бр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╣Ар╕Юр╕╖р╣Ир╕нр╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓'}
                        </Alert>
                      )}
                    </Grid>
                  </Grid>
                )}

                {/* Tab 1: Receipt */}
                {tabIndex === 1 && (
                  <Box>
                    <Typography variant="h5" sx={{ mb: 3, textAlign: 'center', color: '#1976d2' }}>
                      ЁЯз╛ р╣Гр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕гр╕▒р╕Ър╣Ар╕Зр╕┤р╕Щ
                    </Typography>

                    {currentPatient && treatmentData ? (
                      <Paper sx={{ p: 4, maxWidth: 600, mx: 'auto' }} id="receipt-print">
                        {/* Receipt Header */}
                        <Box sx={{ textAlign: 'center', mb: 3, borderBottom: '2px solid #1976d2', pb: 2 }}>
                          <Typography variant="h5" fontWeight="bold">р╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣Мр╕Др╕ер╕┤р╕Щр╕┤р╕Д</Typography>
                          <Typography variant="body2">280 р╕лр╕бр╕╣р╣И 4 р╕Цр╕Щр╕Щ р╣Ар╕Кр╕╡р╕вр╕Зр╣Гр╕лр╕бр╣И-р╕ор╕нр╕Ф р╕Х.р╕Ър╣Йр╕▓р╕Щр╕лр╕ер╕зр╕З р╕н. р╕Ир╕нр╕бр╕Чр╕нр╕З р╕И. р╣Ар╕Кр╕╡р╕вр╕Зр╣Гр╕лр╕бр╣И 50160</Typography>
                          <Typography variant="body2">Tel: 053-826-524</Typography>
                        </Box>

                        {/* Patient Info */}
                        <Grid container spacing={2} sx={{ mb: 3 }}>
                          <Grid item xs={6}>
                            <Typography variant="body2"><strong>VN:</strong> {currentPatient.VNO}</Typography>
                            <Typography variant="body2"><strong>HN:</strong> {currentPatient.HNCODE}</Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="body2"><strong>р╕зр╕▒р╕Щр╕Чр╕╡р╣И:</strong> {new Date().toLocaleDateString('th-TH')}</Typography>
                            <Typography variant="body2"><strong>р╣Ар╕зр╕ер╕▓:</strong> {new Date().toLocaleTimeString('th-TH')}</Typography>
                          </Grid>
                          <Grid item xs={12}>
                            <Typography variant="body2">
                              <strong>р╕Кр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в:</strong> {currentPatient.PRENAME} {currentPatient.NAME1} {currentPatient.SURNAME}
                            </Typography>
                          </Grid>
                        </Grid>

                        {/* Items Table */}
                        <TableContainer sx={{ mb: 3 }}>
                          <Table size="small">
                            <TableHead>
                              <TableRow sx={{ bgcolor: '#f5f5f5' }}>
                                <TableCell><strong>р╕гр╕▓р╕вр╕Бр╕▓р╕г</strong></TableCell>
                                <TableCell align="center"><strong>р╕Ир╕│р╕Щр╕зр╕Щ</strong></TableCell>
                                <TableCell align="right"><strong>р╕гр╕▓р╕Др╕▓</strong></TableCell>
                              </TableRow>
                            </TableHead>
                            <TableBody>
                              {editablePrices.labs.map((lab, index) => (
                                <TableRow key={`lab-${index}`}>
                                  <TableCell>{lab.LABNAME || lab.LABCODE}</TableCell>
                                  <TableCell align="center">1</TableCell>
                                  <TableCell align="right">{lab.editablePrice.toFixed(2)}</TableCell>
                                </TableRow>
                              ))}
                              {editablePrices.procedures.map((proc, index) => (
                                <TableRow key={`proc-${index}`}>
                                  <TableCell>{proc.MED_PRO_NAME_THAI || proc.PROCEDURE_NAME || proc.MEDICAL_PROCEDURE_CODE}</TableCell>
                                  <TableCell align="center">1</TableCell>
                                  <TableCell align="right">{proc.editablePrice.toFixed(2)}</TableCell>
                                </TableRow>
                              ))}
                              {editablePrices.drugs.map((drug, index) => (
                                <TableRow key={`drug-${index}`}>
                                  <TableCell>{drug.GENERIC_NAME || drug.DRUG_CODE}</TableCell>
                                  <TableCell align="center">{drug.QTY || 0} {drug.UNIT_CODE || ''}</TableCell>
                                  <TableCell align="right">{drug.editablePrice.toFixed(2)}</TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                        </TableContainer>

                        {/* Total */}
                        <Box sx={{ borderTop: '2px solid #ddd', pt: 2 }}>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                            <Typography>р╕гр╕зр╕бр╕Др╣Ир╕▓р╕гр╕▒р╕Бр╕йр╕▓:</Typography>
                            <Typography>{calculateTotalFromEditablePrices().toFixed(2)} р╕Ър╕▓р╕Ч</Typography>
                          </Box>
                          {paymentData.discount > 0 && (
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                              <Typography>р╕кр╣Ир╕зр╕Щр╕ер╕Ф:</Typography>
                              <Typography>-{paymentData.discount.toFixed(2)} р╕Ър╕▓р╕Ч</Typography>
                            </Box>
                          )}
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2, fontSize: '1.2rem', fontWeight: 'bold' }}>
                            <Typography variant="h6">р╕вр╕нр╕Фр╕Кр╕│р╕гр╕░:</Typography>
                            <Typography variant="h6" color="primary">{calculateTotal().toFixed(2)} р╕Ър╕▓р╕Ч</Typography>
                          </Box>
                        </Box>

                        {/* Print Button */}
                        <Box sx={{ textAlign: 'center', mt: 3, '@media print': { display: 'none' } }}>
                          <Button
                            variant="contained"
                            startIcon={<PrintIcon />}
                            onClick={() => window.print()}
                          >
                            р╕Юр╕┤р╕бр╕Юр╣Мр╣Гр╕Ър╣Ар╕кр╕гр╣Зр╕И
                          </Button>
                        </Box>
                      </Paper>
                    ) : (
                      <Alert severity="info">р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Бр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╣Ар╕Юр╕╖р╣Ир╕нр╕Фр╕╣р╣Гр╕Ър╣Ар╕кр╕гр╣Зр╕И</Alert>
                    )}
                  </Box>
                )}

                {/* Tab 2: Drug Labels */}

                {tabIndex === 2 && (
                  <Box>
                    <Typography variant="h5" sx={{ mb: 3, textAlign: 'center', color: '#1976d2' }}>
                      ЁЯП╖я╕П р╕Йр╕ер╕▓р╕Бр╕вр╕▓
                    </Typography>

                    {currentPatient && editablePrices.drugs.length > 0 ? (
                      <Box>
                        <Grid container spacing={2} sx={{ mb: 3 }}>
                          {editablePrices.drugs.map((drug, index) => (
                            <Grid item xs={12} md={6} lg={4} key={index}>
                              <Box sx={{
                                width: '320px',
                                minHeight: '450px',
                                background: 'white',
                                border: '2px solid #4a90e2',
                                margin: '10px auto',
                                boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
                                fontFamily: 'Sarabun, sans-serif'
                              }}>
                                {/* Header р╕Др╕ер╕┤р╕Щр╕┤р╕Б */}
                                <Box sx={{
                                  background: 'linear-gradient(135deg, #4a90e2 0%, #357abd 100%)',
                                  color: 'white',
                                  padding: '12px',
                                  textAlign: 'center',
                                  position: 'relative'
                                }}>
                                  <Box sx={{
                                    position: 'absolute',
                                    left: '15px',
                                    top: '50%',
                                    transform: 'translateY(-50%)',
                                    width: '40px',
                                    height: '40px',
                                    background: 'white',
                                    borderRadius: '50%',
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    fontSize: '20px',
                                    color: '#4a90e2'
                                  }}>
                                    ЁЯТК
                                  </Box>
                                  <Typography sx={{ fontSize: '18px', fontWeight: 700, margin: 0, letterSpacing: '0.5px' }}>
                                    р╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣Мр╕Др╕ер╕┤р╕Щр╕┤р╕Д р╕Др╕ер╕┤р╕Щр╕┤р╕Бр╣Ар╕зр╕Кр╕Бр╕гр╕гр╕б
                                  </Typography>
                                  <Typography sx={{ fontSize: '11px', margin: '2px 0', opacity: 0.95 }}>
                                    280/4 р╕Х.р╕Ър╣Йр╕▓р╕Щр╕лр╕ер╕зр╕З р╕н.р╕Ир╕нр╕бр╕Чр╕нр╕З р╕И.р╣Ар╕Кр╕╡р╕вр╕Зр╣Гр╕лр╕бр╣И 50160
                                  </Typography>
                                  <Typography sx={{ fontSize: '12px', margin: 0, fontWeight: 500 }}>
                                    р╣Вр╕Чр╕г : 053-341-723
                                  </Typography>
                                </Box>

                                {/* р╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓р╕Йр╕ер╕▓р╕Б */}
                                <Box sx={{ padding: '15px' }}>
                                  {/* р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в */}
                                  <Box sx={{ borderBottom: '1px solid #e0e0e0', paddingBottom: '10px', marginBottom: '15px' }}>
                                    <Box sx={{ display: 'flex', justifyContent: 'space-between', margin: '3px 0', fontSize: '13px' }}>
                                      <span style={{ color: '#666', minWidth: '40px' }}>р╕Кр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в</span>
                                      <span style={{ flex: 1, margin: '0 10px', fontWeight: 600, color: '#333' }}>
                                        {currentPatient.PRENAME}{currentPatient.NAME1} {currentPatient.SURNAME}
                                      </span>
                                      <span style={{ color: '#666' }}>р╕зр╕▒р╕Щр╕Чр╕╡р╣И</span>
                                      <span style={{ marginLeft: '5px', fontWeight: 600 }}>
                                        {new Date().toLocaleDateString('th-TH', { day: '2-digit', month: '2-digit', year: '2-digit' })}
                                      </span>
                                    </Box>
                                    <Box sx={{ display: 'flex', justifyContent: 'space-between', margin: '8px 0 3px 0', fontSize: '13px' }}>
                                      <span style={{ color: '#666', minWidth: '40px' }}>р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣И</span>
                                      <span style={{ flex: 1, margin: '0 10px', fontWeight: 600, color: '#333' }}>
                                        HN: {currentPatient.HNCODE} VN: {currentPatient.VNO}
                                      </span>
                                      <span style={{ color: '#666' }}>р╕Ир╕│р╕Щр╕зр╕Щ</span>
                                      <span style={{ marginLeft: '5px', fontWeight: 600 }}>
                                        {drug.QTY} {drug.UNIT_CODE}
                                      </span>
                                    </Box>
                                    <Box sx={{ display: 'flex', justifyContent: 'space-between', margin: '8px 0 3px 0', fontSize: '13px' }}>
                                      <span style={{ color: '#666', minWidth: '40px' }}>р╕Кр╕╖р╣Ир╕нр╕вр╕▓р╣Гр╕Кр╣Й</span>
                                      <span style={{ flex: 1, marginLeft: '10px', fontWeight: 600, color: '#2c5aa0' }}>
                                        {drug.GENERIC_NAME || drug.DRUG_CODE}
                                      </span>
                                    </Box>
                                  </Box>

                                  {/* р╕кр╣Ир╕зр╕Щр╕зр╕┤р╕Шр╕╡р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕вр╕▓ */}
                                  <Box sx={{ marginTop: '15px' }}>
                                    <Typography sx={{ fontSize: '13px', fontWeight: 600, color: '#2c5aa0', marginBottom: '8px', textAlign: 'center' }}>
                                      р╕гр╕▒р╕Ър╕Ыр╕гр╕░р╕Чр╕▓р╕Щр╕Др╕гр╕▒р╣Йр╕Зр╕ер╕░ <span style={{ fontWeight: 700, color: '#e74c3c' }}>
                                        {drug.DOSAGE || '1'}
                                      </span> р╣Ар╕бр╣Зр╕Ф &nbsp;&nbsp;&nbsp;&nbsp; р╕зр╕▒р╕Щр╕ер╕░ <span style={{ fontWeight: 700, color: '#e74c3c' }}>
                                        {drug.FREQUENCY || '3'}
                                      </span> р╕Др╕гр╕▒р╣Йр╕З
                                    </Typography>

                                    {/* р╣Др╕нр╕Др╕нр╕Щр╣Ар╕зр╕ер╕▓ */}
                                    <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: '8px', margin: '10px 0' }}>
                                      <Box sx={{ textAlign: 'center', fontSize: '11px', color: '#666' }}>
                                        <span style={{ fontSize: '16px', display: 'block', marginBottom: '2px' }}>ЁЯМЕ</span>
                                        <div style={{ fontSize: '10px' }}>р╣Ар╕Кр╣Йр╕▓<br />Breakfast</div>
                                      </Box>
                                      <Box sx={{
                                        textAlign: 'center',
                                        fontSize: '11px',
                                        color: '#666',
                                        ...(drug.TIME1?.includes('р╕Бр╕ер╕▓р╕Зр╕зр╕▒р╕Щ') || drug.FREQUENCY >= 2 ?
                                          { background: '#e8f4fd', borderRadius: '4px', padding: '4px', color: '#2c5aa0', fontWeight: 600 } : {})
                                      }}>
                                        <span style={{ fontSize: '16px', display: 'block', marginBottom: '2px' }}>тШАя╕П</span>
                                        <div style={{ fontSize: '10px' }}>р╕Бр╕ер╕▓р╕Зр╕зр╕▒р╕Щ<br />Lunch</div>
                                      </Box>
                                      <Box sx={{
                                        textAlign: 'center',
                                        fontSize: '11px',
                                        color: '#666',
                                        ...(drug.TIME1?.includes('р╣Ар╕вр╣Зр╕Щ') || drug.FREQUENCY >= 3 ?
                                          { background: '#e8f4fd', borderRadius: '4px', padding: '4px', color: '#2c5aa0', fontWeight: 600 } : {})
                                      }}>
                                        <span style={{ fontSize: '16px', display: 'block', marginBottom: '2px' }}>ЁЯМЖ</span>
                                        <div style={{ fontSize: '10px' }}>р╣Ар╕вр╣Зр╕Щ<br />Dinner</div>
                                      </Box>
                                      <Box sx={{ textAlign: 'center', fontSize: '11px', color: '#666' }}>
                                        <span style={{ fontSize: '16px', display: 'block', marginBottom: '2px' }}>ЁЯМЩ</span>
                                        <div style={{ fontSize: '10px' }}>р╕Бр╣Ир╕нр╕Щр╕Щр╕нр╕Щ<br />At bedtime</div>
                                      </Box>
                                    </Box>

                                    {/* р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╣Ар╕зр╕ер╕▓р╕нр╕▓р╕лр╕▓р╕г */}
                                    <Box sx={{ margin: '10px 0' }}>
                                      <Box sx={{ display: 'flex', alignItems: 'center', margin: '3px 0', fontSize: '11px' }}>
                                        <Box sx={{ width: '12px', height: '12px', border: '1px solid #4a90e2', marginRight: '6px', borderRadius: '2px' }}></Box>
                                        <span>р╕Бр╣Ир╕нр╕Щр╕нр╕▓р╕лр╕▓р╕г</span>
                                        <span style={{ flex: 1, textAlign: 'right', fontSize: '10px' }}>Before meal</span>
                                      </Box>
                                      <Box sx={{ display: 'flex', alignItems: 'center', margin: '3px 0', fontSize: '11px' }}>
                                        <Box sx={{
                                          width: '12px',
                                          height: '12px',
                                          border: '1px solid #4a90e2',
                                          marginRight: '6px',
                                          borderRadius: '2px',
                                          background: '#2c5aa0',
                                          position: 'relative'
                                        }}>
                                          <span style={{ color: 'white', fontSize: '8px', position: 'absolute', top: '1px', left: '3px' }}>тЬУ</span>
                                        </Box>
                                        <span style={{ fontWeight: 600, color: '#2c5aa0' }}>р╕лр╕ер╕▒р╕Зр╕нр╕▓р╕лр╕▓р╕г</span>
                                        <span style={{ flex: 1, textAlign: 'right', fontSize: '10px', color: '#2c5aa0' }}>After meal</span>
                                      </Box>
                                    </Box>

                                    <Box sx={{ display: 'flex', justifyContent: 'space-between', margin: '10px 0', fontSize: '11px' }}>
                                      <span>р╣Ар╕бр╕╖р╣Ир╕нр╕бр╕╡р╕нр╕▓р╕Бр╕▓р╕г</span>
                                      <span style={{ flex: 1, margin: '0 10px', fontWeight: 600, color: '#e74c3c' }}>
                                        {drug.NOTE1?.includes('р╣Ар╕бр╕╖р╣Ир╕н') ? drug.NOTE1 : 'р╕Хр╕▓р╕бр╣Бр╕Юр╕Чр╕вр╣Мр╕кр╕▒р╣Ир╕З'}
                                      </span>
                                      <span>р╕Чр╕╕р╕Б</span>
                                      <span style={{ margin: '0 5px', fontWeight: 600, color: '#e74c3c' }}>6</span>
                                      <span>р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З</span>
                                    </Box>

                                    {/* р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│ */}
                                    <Box sx={{ borderTop: '1px solid #ccc', margin: '10px 0', paddingTop: '10px' }}>
                                      <Typography sx={{ fontSize: '12px', fontWeight: 600, marginBottom: '8px', color: '#2c5aa0' }}>
                                        р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│
                                      </Typography>

                                      <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '6px', fontSize: '10px', color: '#555' }}>
                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                          <Box sx={{ width: '10px', height: '10px', border: '1px solid #4a90e2', marginRight: '4px', borderRadius: '1px' }}></Box>
                                          <span>р╕Бр╣Ир╕нр╕Щр╕нр╕▓р╕лр╕▓р╕гр╕Др╕гр╕╢р╣Ир╕З-р╕лр╕Щр╕╢р╣Ир╕Зр╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З<br /><span style={{ fontSize: '9px' }}>30-60 minutes before meals</span></span>
                                        </Box>
                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                          <Box sx={{
                                            width: '10px',
                                            height: '10px',
                                            border: '1px solid #4a90e2',
                                            marginRight: '4px',
                                            borderRadius: '1px',
                                            background: '#2c5aa0',
                                            position: 'relative'
                                          }}>
                                            <span style={{ color: 'white', fontSize: '6px', position: 'absolute', top: '1px', left: '2px' }}>тЬУ</span>
                                          </Box>
                                          <span style={{ fontWeight: 600, color: '#2c5aa0' }}>р╕Чр╕▓р╕Щр╕вр╕▓р╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕Бр╕▒р╕Щр╕Ир╕Щр╕лр╕бр╕Ф<br /><span style={{ fontSize: '9px', color: '#2c5aa0' }}>Take this medicine until finished</span></span>
                                        </Box>
                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                          <Box sx={{ width: '10px', height: '10px', border: '1px solid #4a90e2', marginRight: '4px', borderRadius: '1px' }}></Box>
                                          <span>р╕Чр╕▓р╕Щр╕лр╕ер╕▒р╕Зр╕нр╕▓р╕лр╕▓р╕гр╕Чр╕▒р╕Щр╕Чр╕╡<br /><span style={{ fontSize: '9px' }}>Immediately after meals</span></span>
                                        </Box>
                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                          <Box sx={{
                                            width: '10px',
                                            height: '10px',
                                            border: '1px solid #4a90e2',
                                            marginRight: '4px',
                                            borderRadius: '1px',
                                            background: '#2c5aa0',
                                            position: 'relative'
                                          }}>
                                            <span style={{ color: 'white', fontSize: '6px', position: 'absolute', top: '1px', left: '2px' }}>тЬУ</span>
                                          </Box>
                                          <span style={{ fontWeight: 600, color: '#2c5aa0' }}>р╕Фр╕╖р╣Ир╕бр╕Щр╣Йр╕│р╕Хр╕▓р╕бр╕бр╕▓р╕Бр╣Ж<br /><span style={{ fontSize: '9px', color: '#2c5aa0' }}>Follow with 1-2 glasses of water</span></span>
                                        </Box>
                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                          <Box sx={{ width: '10px', height: '10px', border: '1px solid #4a90e2', marginRight: '4px', borderRadius: '1px' }}></Box>
                                          <span>р╕вр╕▓р╕Щр╕╡р╣Йр╕нр╕▓р╕Ир╕Чр╕│р╣Гр╕лр╣Йр╕Зр╣Ир╕зр╕Зр╕Лр╕╢р╕б<br /><span style={{ fontSize: '9px' }}>This drug may cause drowsiness</span></span>
                                        </Box>
                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                          <Box sx={{ width: '10px', height: '10px', border: '1px solid #4a90e2', marginRight: '4px', borderRadius: '1px' }}></Box>
                                          <span>р╕нр╕╖р╣Ир╕Щр╣Ж..............................<br /><span style={{ fontSize: '9px' }}>Others</span></span>
                                        </Box>
                                      </Box>
                                    </Box>

                                    {/* р╕зр╕▒р╕Щр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕ */}
                                    <Box sx={{ marginTop: '15px', paddingTop: '8px', borderTop: '1px solid #e0e0e0', textAlign: 'center' }}>
                                      <Typography sx={{ fontSize: '11px', color: '#666' }}>
                                        р╕зр╕▒р╕Щр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕ (Exp.) <span style={{ fontWeight: 600, color: '#e74c3c' }}>
                                          {drug.EXPIRE_DATE || '31/12/2025'}
                                        </span>
                                      </Typography>
                                    </Box>
                                  </Box>
                                </Box>
                              </Box>
                            </Grid>
                          ))}
                        </Grid>

                        {/* р╕Ыр╕╕р╣Ир╕бр╕Юр╕┤р╕бр╕Юр╣М */}
                        <Box sx={{ textAlign: 'center', mt: 3 }}>
                          <Button
                            variant="contained"
                            startIcon={<PrintIcon />}
                            onClick={() => window.print()}
                            size="large"
                            sx={{
                              backgroundColor: "#5698E0",
                              '&:hover': { backgroundColor: "#2B69AC" },
                              px: 4,
                              py: 1.5,
                              fontSize: '16px',
                              fontWeight: 600
                            }}
                          >
                            ЁЯЦия╕П р╕Юр╕┤р╕бр╕Юр╣Мр╕Йр╕ер╕▓р╕Бр╕вр╕▓р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф ({editablePrices.drugs.length} р╕Йр╕ер╕▓р╕Б)
                          </Button>
                        </Box>

                        {/* CSS р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Юр╕┤р╕бр╕Юр╣М */}
                        <style jsx>{`
          @media print {
            .MuiContainer-root {
              margin: 0 !important;
              padding: 0 !important;
            }
            .MuiButton-root {
              display: none !important;
            }
            .MuiTabs-root {
              display: none !important;
            }
            .MuiTypography-h5 {
              display: none !important;
            }
          }
        `}</style>
                      </Box>
                    ) : (
                      <Alert severity="info" sx={{ borderRadius: '12px', textAlign: 'center', py: 4 }}>
                        {!currentPatient ? 'р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Бр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╣Ар╕Юр╕╖р╣Ир╕нр╕Фр╕╣р╕Йр╕ер╕▓р╕Бр╕вр╕▓' : 'р╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕гр╕▓р╕вр╕Щр╕╡р╣Йр╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕гр╕кр╕▒р╣Ир╕Зр╕вр╕▓'}
                      </Alert>
                    )}
                  </Box>
                )}
              </CardContent>
            </Card>
          )}
        </Grid>
      </Grid>

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
      >
        <Alert
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          severity={snackbar.severity}
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default Paymentanddispensingmedicine;