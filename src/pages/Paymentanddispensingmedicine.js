import React, { useState, useEffect } from "react";
import { useNavigate } from 'react-router-dom';
import {
  Grid,
  Container,
  Tabs,
  Tab,
  Card,
  CardContent,
  Typography,
  Box,
  Button,
  Alert,
  CircularProgress,
  Snackbar,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow
} from "@mui/material";
import { Print as PrintIcon } from "@mui/icons-material";

import { PDFDownloadLink, PDFViewer } from "@react-pdf/renderer";
import ReceiptPDF from "../components/Paymentanddispensingmedicine/ReceiptPDF";

// Import Services
import PatientService from "../services/patientService";
import TreatmentService from "../services/treatmentService";

// Import Components
import PatientQueueSidebar from "../components/Paymentanddispensingmedicine/PatientQueueSidebar";
import PatientInfoHeader from "../components/Paymentanddispensingmedicine/PatientInfoHeader";
import PaymentSummaryCard from "../components/Paymentanddispensingmedicine/PaymentSummaryCard";
import DrugsTable from "../components/Paymentanddispensingmedicine/DrugsTable";
import LabProceduresTable from "../components/Paymentanddispensingmedicine/LabProceduresTable";

const Paymentanddispensingmedicine = () => {
  const navigate = useNavigate();
  const [tabIndex, setTabIndex] = useState(0);
  const [selectedPatientIndex, setSelectedPatientIndex] = useState(0);
  const [patients, setPatients] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [treatmentData, setTreatmentData] = useState(null);
  const [loadingTreatment, setLoadingTreatment] = useState(false);

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏Ñ‡∏≤
  const [editablePrices, setEditablePrices] = useState({
    labs: [],
    procedures: [],
    drugs: []
  });
  const [editingItem, setEditingItem] = useState({ type: null, index: null });

  // Payment states
  const [paymentData, setPaymentData] = useState({
    paymentMethod: '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
    receivedAmount: '',
    discount: 0,
    remarks: ''
  });

  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success'
  });

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
  useEffect(() => {
    loadCompletedPatients();
  }, []);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
  useEffect(() => {
    if (patients[selectedPatientIndex]) {
      loadTreatmentData(patients[selectedPatientIndex].VNO);
    }
  }, [selectedPatientIndex, patients]);

  const handlePrintReceipt = () => {
    if (!PrintUtils.checkPrintSupport()) return;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    if (!currentPatient || !treatmentData || calculateTotalFromEditablePrices() === 0) {
      setSnackbar({
        open: true,
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        severity: 'error'
      });
      return;
    }

    PrintUtils.printReceipt();
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏â‡∏•‡∏≤‡∏Å‡∏¢‡∏≤
  const handlePrintDrugLabels = () => {
    if (!PrintUtils.checkPrintSupport()) return;

    if (!currentPatient || editablePrices.drugs.length === 0) {
      setSnackbar({
        open: true,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏â‡∏•‡∏≤‡∏Å',
        severity: 'error'
      });
      return;
    }

    PrintUtils.printDrugLabels();
  };

  const handlePayment = async () => {
    try {
      if (!treatmentData) {
        setSnackbar({
          open: true,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤',
          severity: 'error'
        });
        return;
      }

      if (!paymentData.receivedAmount || parseFloat(paymentData.receivedAmount) < calculateTotal()) {
        setSnackbar({
          open: true,
          message: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠',
          severity: 'error'
        });
        return;
      }

      const currentPatient = patients[selectedPatientIndex];

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á treatment record
      const paymentInfo = {
        PAYMENT_STATUS: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
        PAYMENT_DATE: new Date().toISOString().split('T')[0],
        PAYMENT_TIME: new Date().toLocaleTimeString('th-TH'),
        TOTAL_AMOUNT: calculateTotal(),
        DISCOUNT: paymentData.discount || 0,
        PAYMENT_METHOD: paymentData.paymentMethod,
        RECEIVED_AMOUNT: parseFloat(paymentData.receivedAmount),
        CHANGE_AMOUNT: parseFloat(paymentData.receivedAmount) - calculateTotal(),
        CASHIER: 'PAYMENT_SYSTEM'
      };

      // Step 1: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï treatment record
      console.log('üí∞ Updating treatment record for VNO:', currentPatient.VNO);

      try {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï STATUS1 ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        const treatmentUpdateData = {
          VNO: currentPatient.VNO,
          STATUS1: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß', // ‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡∏î‡πå STATUS1 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
          PAYMENT_INFO: JSON.stringify(paymentInfo), // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏õ‡πá‡∏ô JSON
          SYSTEM_DATE: new Date().toISOString().split('T')[0],
          SYSTEM_TIME: new Date().toLocaleTimeString('th-TH')
        };

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï treatment
        const treatmentResponse = await TreatmentService.updateTreatmentStatus(
          currentPatient.VNO,
          treatmentUpdateData
        );

        if (!treatmentResponse.success) {
          throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï treatment record ‡πÑ‡∏î‡πâ: ' + treatmentResponse.message);
        }

        console.log('‚úÖ Treatment record updated successfully');

      } catch (treatmentError) {
        console.error('‚ùå Error updating treatment record:', treatmentError);
        throw treatmentError;
      }

      // Step 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏õ‡πá‡∏ô '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
      try {
        const queueUpdateResponse = await QueueService.updateQueueStatus(
          currentPatient.queueId,
          '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
        );

        if (!queueUpdateResponse.success) {
          console.warn('‚ö†Ô∏è Failed to update queue status:', queueUpdateResponse.message);
        } else {
          console.log('‚úÖ Queue status updated successfully');
        }
      } catch (queueError) {
        console.error('‚ùå Error updating queue status:', queueError);
        // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ treatment record ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏ß‡πà‡∏≤
      }

      // Step 3: ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å state (UI)
      const updatedPatients = patients.filter((_, index) => index !== selectedPatientIndex);
      setPatients(updatedPatients);

      // Step 4: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï selectedPatientIndex
      if (updatedPatients.length === 0) {
        setSelectedPatientIndex(0);
        setTreatmentData(null);
        setEditablePrices({
          labs: [],
          procedures: [],
          drugs: []
        });
      } else {
        if (selectedPatientIndex >= updatedPatients.length) {
          setSelectedPatientIndex(updatedPatients.length - 1);
        }
      }

      // Success message
      setSnackbar({
        open: true,
        message: `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞: ‡∏ø${calculateTotal().toFixed(2)} - ${currentPatient.PRENAME} ${currentPatient.NAME1} ${currentPatient.SURNAME}`,
        severity: 'success'
      });

      // Step 5: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
      setPaymentData({
        paymentMethod: '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
        receivedAmount: '',
        discount: 0,
        remarks: ''
      });

      setTabIndex(1); // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à

      // Step 6: ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      setTimeout(() => {
        loadCompletedPatients();
      }, 1000);

    } catch (error) {
      console.error('‚ùå Error processing payment:', error);
      setSnackbar({
        open: true,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: ' + error.message,
        severity: 'error'
      });
    }
  };

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° STATUS1
  const loadCompletedPatients = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await PatientService.getTodayPatientsFromQueue({
        refresh: true,
        timestamp: Date.now()
      });

      if (response.success) {
        console.log('Raw queue data:', response.data.length, 'patients');

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• treatment status ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
        const patientsWithTreatmentStatus = await Promise.all(
          response.data.map(async (patient) => {
            try {
              // ‡∏î‡∏∂‡∏á treatment status ‡∏à‡∏≤‡∏Å VNO
              if (patient.VNO) {
                const treatmentResponse = await TreatmentService.getTreatmentByVNO(patient.VNO);
                if (treatmentResponse.success && treatmentResponse.data.treatment) {
                  patient.STATUS1 = treatmentResponse.data.treatment.STATUS1;
                }
              }
              return patient;
            } catch (error) {
              console.warn(`Failed to get treatment status for VNO ${patient.VNO}:`, error);
              return patient;
            }
          })
        );

        // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        const filteredPatients = patientsWithTreatmentStatus.filter(patient => {
          const queueStatus = patient.queueStatus || patient.QUEUE_STATUS || patient.STATUS || '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à';
          const treatmentStatus = patient.STATUS1 || '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à';

          console.log(`Patient ${patient.HNCODE}: queueStatus="${queueStatus}", treatmentStatus="${treatmentStatus}"`);

          return queueStatus === '‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß' &&
            treatmentStatus !== '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß' &&
            treatmentStatus !== '‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß';
        });

        console.log(`Found ${filteredPatients.length} patients waiting for payment`);

        setPatients(filteredPatients);

        if (filteredPatients.length === 0) {
          setError('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô');
        }

      } else {
        setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ: ' + response.message);
      }
    } catch (err) {
      console.error('Error loading patients:', err);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const loadTreatmentData = async (vno) => {
    if (!vno) {
      setTreatmentData(null);
      return;
    }

    try {
      setLoadingTreatment(true);
      const response = await TreatmentService.getTreatmentByVNO(vno);

      if (response.success) {
        setTreatmentData(response.data);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Labs ‡πÅ‡∏•‡∏∞ Procedures arrays ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
        let labsArray = [];
        let proceduresArray = [];

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Lab/X-ray ‡∏à‡∏≤‡∏Å INVESTIGATION_NOTES (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà)
        const investigationNotes = response.data.treatment?.INVESTIGATION_NOTES || '';

        if (investigationNotes) {
          console.log('üìù Payment - Loading investigation notes:', investigationNotes);

          // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• [Laboratory] ‡πÅ‡∏•‡∏∞ [Imaging] ‡∏à‡∏≤‡∏Å INVESTIGATION_NOTES
          const lines = investigationNotes.split('\n\n');

          lines.forEach(line => {
            if (line.startsWith('[Laboratory]')) {
              const labNote = line.replace('[Laboratory]', '').trim();
              if (labNote) {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á lab object ‡∏à‡∏≤‡∏Å note
                labsArray.push({
                  LABNAME: labNote,
                  LABCODE: 'LAB_FROM_NOTE',
                  PRICE: 100, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                  NOTE1: labNote,
                  editablePrice: 100,
                  originalPrice: 100
                });
              }
            } else if (line.startsWith('[Imaging]')) {
              const imagingNote = line.replace('[Imaging]', '').trim();
              if (imagingNote) {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á lab object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö X-ray/Imaging
                labsArray.push({
                  LABNAME: imagingNote,
                  LABCODE: 'XRAY_FROM_NOTE',
                  PRICE: 200, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö X-ray
                  NOTE1: imagingNote,
                  editablePrice: 200,
                  originalPrice: 200
                });
              }
            }
          });
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Lab/X-ray ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility)
        if (response.data.labTests && response.data.labTests.length > 0) {
          const oldLabTests = response.data.labTests.map(item => ({
            ...item,
            editablePrice: parseFloat(item.PRICE || 100),
            originalPrice: parseFloat(item.PRICE || 100)
          }));
          labsArray = [...labsArray, ...oldLabTests];
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• radiological tests ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
        if (response.data.radiologicalTests && response.data.radiologicalTests.length > 0) {
          const oldRadioTests = response.data.radiologicalTests.map(item => ({
            ...item,
            LABNAME: item.RLNAME || item.PROCEDURE_NAME,
            LABCODE: item.RLCODE || item.PROCEDURE_CODE,
            PRICE: item.PRICE || 200,
            editablePrice: parseFloat(item.PRICE || 200),
            originalPrice: parseFloat(item.PRICE || 200)
          }));
          labsArray = [...labsArray, ...oldRadioTests];
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Procedures
        if (response.data.procedures && response.data.procedures.length > 0) {
          proceduresArray = response.data.procedures.map(item => ({
            ...item,
            editablePrice: parseFloat(item.AMT || 200),
            originalPrice: parseFloat(item.AMT || 200)
          }));
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Drugs
        let drugsArray = [];
        if (response.data.drugs && response.data.drugs.length > 0) {
          drugsArray = response.data.drugs.map(item => ({
            ...item,
            editablePrice: parseFloat(item.AMT || 0),
            originalPrice: parseFloat(item.AMT || 0)
          }));
        }

        // ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
        setEditablePrices({
          labs: labsArray,
          procedures: proceduresArray,
          drugs: drugsArray
        });

        console.log('üí∞ Payment - Final editable prices:', {
          labs: labsArray,
          procedures: proceduresArray,
          drugs: drugsArray
        });

      } else {
        setTreatmentData(null);
        setSnackbar({
          open: true,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤: ' + response.message,
          severity: 'warning'
        });
      }
    } catch (err) {
      console.error('Error loading treatment data:', err);
      setTreatmentData(null);
      setSnackbar({
        open: true,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤: ' + err.message,
        severity: 'error'
      });
    } finally {
      setLoadingTreatment(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏Ñ‡∏≤
  const handleEditPrice = (type, index) => {
    setEditingItem({ type, index });
    // ‡πÄ‡∏ã‡πá‡∏ï global function ‡πÉ‡∏´‡πâ EditablePriceCell ‡πÉ‡∏ä‡πâ
    window.editPrice = (type, index) => {
      setEditingItem({ type, index });
    };
  };

  const handleSavePrice = (type, index, newPrice) => {
    const price = parseFloat(newPrice) || 0;

    setEditablePrices(prev => ({
      ...prev,
      [type]: prev[type].map((item, i) =>
        i === index ? { ...item, editablePrice: price } : item
      )
    }));

    setEditingItem({ type: null, index: null });

    setSnackbar({
      open: true,
      message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      severity: 'success'
    });
  };

  const handleCancelEdit = () => {
    setEditingItem({ type: null, index: null });
  };

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
  const calculateTotalFromEditablePrices = () => {
    const labTotal = editablePrices.labs.reduce((sum, item) => sum + item.editablePrice, 0);
    const procedureTotal = editablePrices.procedures.reduce((sum, item) => sum + item.editablePrice, 0);
    const drugTotal = editablePrices.drugs.reduce((sum, item) => sum + item.editablePrice, 0);

    return labTotal + procedureTotal + drugTotal;
  };

  const calculateTotal = () => {
    const totalCost = calculateTotalFromEditablePrices();
    const discount = parseFloat(paymentData.discount || 0);
    return Math.max(0, totalCost - discount);
  };

  // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
  const handlePatientSelect = (index) => {
    setSelectedPatientIndex(index);
    setTabIndex(0);
    setPaymentData({
      paymentMethod: '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
      receivedAmount: '',
      discount: 0,
      remarks: ''
    });
    setEditingItem({ type: null, index: null });
  };

  const handleNextPatient = () => {
    if (selectedPatientIndex < patients.length - 1) {
      setSelectedPatientIndex(selectedPatientIndex + 1);
    }
  };

  const handlePreviousPatient = () => {
    if (selectedPatientIndex > 0) {
      setSelectedPatientIndex(selectedPatientIndex - 1);
    }
  };


  const currentPatient = patients[selectedPatientIndex];

  // Loading state
  if (loading) {
    return (
      <Container maxWidth={false} sx={{ mt: 2, textAlign: 'center' }}>
        <CircularProgress />
        <Typography variant="h6" sx={{ mt: 2 }}>
          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢...
        </Typography>
      </Container>
    );
  }

  // Error state
  if (error) {
    return (
      <Container maxWidth={false} sx={{ mt: 2 }}>
        <Alert severity="error" action={
          <Button color="inherit" size="small" onClick={loadCompletedPatients}>
            ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          </Button>
        }>
          {error}
        </Alert>
      </Container>
    );
  }

  const generateProfessionalReceipt = () => {
    if (!currentPatient) {
      setSnackbar({
        open: true,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏Å‡πà‡∏≠‡∏ô',
        severity: 'error'
      });
      return;
    }

    const totalAmount = calculateTotalFromEditablePrices();
    const finalAmount = calculateTotal();

    // ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const allItems = [
      ...editablePrices.labs.map(item => ({
        name: item.LABNAME || item.LABCODE || "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à",
        quantity: 1,
        unit: "‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        price: item.editablePrice || 0
      })),
      ...editablePrices.procedures.map(item => ({
        name: item.MED_PRO_NAME_THAI || item.PROCEDURE_NAME || item.MEDICAL_PROCEDURE_CODE || "‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£",
        quantity: 1,
        unit: "‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        price: item.editablePrice || 0
      })),
      ...editablePrices.drugs.map(item => ({
        name: item.GENERIC_NAME || item.DRUG_CODE || "‡∏¢‡∏≤",
        quantity: item.QTY || 1,
        unit: item.UNIT_CODE || "‡πÄ‡∏°‡πá‡∏î",
        price: item.editablePrice || 0
      }))
    ];

    const receiptWindow = window.open('', '_blank', 'width=800,height=900');

    const receiptHTML = `
      <!DOCTYPE html>
      <html>
      <head>
          <meta charset="UTF-8">
          <title>‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô - ${currentPatient.VNO}</title>
          <link href="https://fonts.googleapis.com/css2?family=Sarabun:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
              * {
                  margin: 0;
                  padding: 0;
                  box-sizing: border-box;
              }
              
              body {
                  font-family: 'Sarabun', Arial, sans-serif;
                  font-size: 14px;
                  line-height: 1.6;
                  color: #333;
                  background: #f5f5f5;
                  padding: 20px;
              }
              
              .receipt-container {
                  max-width: 700px;
                  margin: 0 auto;
                  background: white;
                  box-shadow: 0 0 20px rgba(0,0,0,0.1);
                  border-radius: 10px;
                  overflow: hidden;
              }
              
              .header {
                  background: linear-gradient(135deg, #1976d2 0%, #1565c0 100%);
                  color: white;
                  text-align: center;
                  padding: 30px 20px;
                  position: relative;
              }
              
              .header::before {
                  content: '';
                  position: absolute;
                  top: 0;
                  left: 0;
                  right: 0;
                  bottom: 0;
                  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="20" cy="20" r="2" fill="white" opacity="0.1"/><circle cx="80" cy="80" r="2" fill="white" opacity="0.1"/><circle cx="40" cy="60" r="1" fill="white" opacity="0.1"/></svg>');
              }
              
              .clinic-name {
                  font-size: 28px;
                  font-weight: 700;
                  margin-bottom: 8px;
                  position: relative;
                  z-index: 1;
              }
              
              .clinic-address {
                  font-size: 14px;
                  opacity: 0.9;
                  margin-bottom: 4px;
                  position: relative;
                  z-index: 1;
              }
              
              .receipt-title {
                  font-size: 20px;
                  font-weight: 600;
                  margin-top: 15px;
                  padding: 10px 30px;
                  background: rgba(255,255,255,0.2);
                  border-radius: 20px;
                  display: inline-block;
                  position: relative;
                  z-index: 1;
              }
              
              .content {
                  padding: 30px;
              }
              
              .patient-info {
                  background: #f8f9fa;
                  border-radius: 10px;
                  padding: 20px;
                  margin-bottom: 25px;
                  border-left: 4px solid #1976d2;
              }
              
              .info-row {
                  display: flex;
                  justify-content: space-between;
                  align-items: center;
                  margin-bottom: 10px;
                  flex-wrap: wrap;
                  gap: 10px;
              }
              
              .info-row:last-child {
                  margin-bottom: 0;
              }
              
              .info-label {
                  font-weight: 600;
                  color: #555;
                  min-width: 80px;
              }
              
              .info-value {
                  font-weight: 500;
                  color: #1976d2;
              }
              
              .items-section {
                  margin-bottom: 25px;
              }
              
              .section-title {
                  font-size: 18px;
                  font-weight: 600;
                  color: #1976d2;
                  margin-bottom: 15px;
                  padding-bottom: 5px;
                  border-bottom: 2px solid #e3f2fd;
              }
              
              .items-table {
                  width: 100%;
                  border-collapse: collapse;
                  margin-bottom: 20px;
                  border-radius: 8px;
                  overflow: hidden;
                  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
              }
              
              .items-table th {
                  background: linear-gradient(135deg, #1976d2 0%, #1565c0 100%);
                  color: white;
                  font-weight: 600;
                  padding: 15px 10px;
                  text-align: left;
                  font-size: 14px;
              }
              
              .items-table th:nth-child(1) { width: 50%; }
              .items-table th:nth-child(2) { width: 20%; text-align: center; }
              .items-table th:nth-child(3) { width: 30%; text-align: right; }
              
              .items-table td {
                  padding: 12px 10px;
                  border-bottom: 1px solid #eee;
                  font-size: 13px;
              }
              
              .items-table tbody tr:nth-child(even) {
                  background: #f8f9fa;
              }
              
              .items-table tbody tr:hover {
                  background: #e3f2fd;
              }
              
              .item-name {
                  font-weight: 500;
                  color: #333;
              }
              
              .item-quantity {
                  text-align: center;
                  font-weight: 500;
              }
              
              .item-price {
                  text-align: right;
                  font-weight: 600;
                  color: #1976d2;
              }
              
              .summary-section {
                  background: #f8f9fa;
                  border-radius: 10px;
                  padding: 20px;
                  border-top: 3px solid #1976d2;
              }
              
              .summary-row {
                  display: flex;
                  justify-content: space-between;
                  align-items: center;
                  margin-bottom: 10px;
                  font-size: 15px;
              }
              
              .summary-row:last-child {
                  margin-bottom: 0;
              }
              
              .summary-label {
                  font-weight: 500;
              }
              
              .summary-value {
                  font-weight: 600;
              }
              
              .total-row {
                  background: white;
                  margin: 15px -10px -10px;
                  padding: 15px 10px;
                  border-radius: 8px;
                  border: 2px solid #1976d2;
                  font-size: 18px;
                  font-weight: 700;
                  color: #1976d2;
              }
              
              .footer {
                  background: #f8f9fa;
                  text-align: center;
                  padding: 20px;
                  color: #666;
                  font-size: 12px;
              }
              
              .thank-you {
                  font-size: 16px;
                  font-weight: 600;
                  color: #1976d2;
                  margin-bottom: 10px;
              }
              
              .print-section {
                  text-align: center;
                  padding: 20px;
                  background: white;
              }
              
              .print-btn {
                  background: linear-gradient(135deg, #1976d2 0%, #1565c0 100%);
                  color: white;
                  border: none;
                  padding: 12px 30px;
                  font-size: 16px;
                  font-weight: 600;
                  border-radius: 25px;
                  cursor: pointer;
                  margin: 0 10px;
                  transition: all 0.3s ease;
                  font-family: 'Sarabun', Arial, sans-serif;
              }
              
              .print-btn:hover {
                  transform: translateY(-2px);
                  box-shadow: 0 5px 15px rgba(25,118,210,0.4);
              }
              
              .close-btn {
                  background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
              }
              
              .close-btn:hover {
                  box-shadow: 0 5px 15px rgba(244,67,54,0.4);
              }
              
              .empty-state {
                  text-align: center;
                  padding: 40px;
                  color: #999;
                  font-style: italic;
              }
              
              @media print {
                  body {
                      background: white;
                      padding: 0;
                  }
                  .receipt-container {
                      box-shadow: none;
                      border-radius: 0;
                  }
                  .print-section {
                      display: none !important;
                  }
              }
              
              @media (max-width: 600px) {
                  .receipt-container {
                      margin: 0;
                      border-radius: 0;
                  }
                  
                  .content {
                      padding: 20px;
                  }
                  
                  .items-table th,
                  .items-table td {
                      padding: 8px 5px;
                      font-size: 12px;
                  }
                  
                  .info-row {
                      flex-direction: column;
                      align-items: flex-start;
                  }
              }
          </style>
      </head>
      <body>
          <div class="receipt-container">
              <!-- Header -->
              <div class="header">
                  <div class="clinic-name">‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Ñ</div>
                  <div class="clinic-address">280 ‡∏´‡∏°‡∏π‡πà 4 ‡∏ñ‡∏ô‡∏ô ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà-‡∏Æ‡∏≠‡∏î ‡∏ï.‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏ß‡∏á ‡∏≠.‡∏à‡∏≠‡∏°‡∏ó‡∏≠‡∏á ‡∏à.‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 50160</div>
                  <div class="clinic-address">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: 053-826-524</div>
                  <div class="receipt-title">‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô</div>
              </div>
              
              <!-- Content -->
              <div class="content">
                  <!-- Patient Information -->
                  <div class="patient-info">
                      <div class="info-row">
                          <span class="info-label">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà VN:</span>
                          <span class="info-value">${currentPatient.VNO}</span>
                          <span class="info-label">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà HN:</span>
                          <span class="info-value">${currentPatient.HNCODE}</span>
                      </div>
                      <div class="info-row">
                          <span class="info-label">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢:</span>
                          <span class="info-value">${currentPatient.PRENAME}${currentPatient.NAME1} ${currentPatient.SURNAME}</span>
                      </div>
                      <div class="info-row">
                          <span class="info-label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</span>
                          <span class="info-value">${new Date().toLocaleDateString('th-TH', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })}</span>
                          <span class="info-label">‡πÄ‡∏ß‡∏•‡∏≤:</span>
                          <span class="info-value">${new Date().toLocaleTimeString('th-TH', {
      hour: '2-digit',
      minute: '2-digit'
    })}</span>
                      </div>
                  </div>
                  
                  <!-- Items Section -->
                  <div class="items-section">
                      <div class="section-title">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢</div>
                      
                      ${allItems.length > 0 ? `
                      <table class="items-table">
                          <thead>
                              <tr>
                                  <th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                                  <th>‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)</th>
                              </tr>
                          </thead>
                          <tbody>
                              ${allItems.map(item => `
                                  <tr>
                                      <td class="item-name">${item.name}</td>
                                      <td class="item-quantity">${item.quantity} ${item.unit}</td>
                                      <td class="item-price">${item.price.toFixed(2)}</td>
                                  </tr>
                              `).join('')}
                          </tbody>
                      </table>
                      ` : '<div class="empty-state">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢</div>'}
                  </div>
                  
                  <!-- Summary Section -->
                  <div class="summary-section">
                      <div class="summary-row">
                          <span class="summary-label">‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
                          <span class="summary-value">${totalAmount.toFixed(2)} ‡∏ö‡∏≤‡∏ó</span>
                      </div>
                      
                      ${paymentData.discount > 0 ? `
                      <div class="summary-row">
                          <span class="summary-label">‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î:</span>
                          <span class="summary-value">-${paymentData.discount.toFixed(2)} ‡∏ö‡∏≤‡∏ó</span>
                      </div>
                      ` : ''}
                      
                      <div class="summary-row total-row">
                          <span class="summary-label">‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏™‡∏∏‡∏ó‡∏ò‡∏¥:</span>
                          <span class="summary-value">${finalAmount.toFixed(2)} ‡∏ö‡∏≤‡∏ó</span>
                      </div>
                  </div>
              </div>
              
              <!-- Footer -->
              <div class="footer">
                  <div class="thank-you">‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</div>
                  <div>‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH')}</div>
              </div>
          </div>
          
          <!-- Print Section -->
          <div class="print-section">
              <button class="print-btn" onclick="window.print()">
                  üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
              </button>
              <button class="print-btn close-btn" onclick="window.close()">
                  ‚ùå ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
              </button>
          </div>
      </body>
      </html>
    `;

    receiptWindow.document.write(receiptHTML);
    receiptWindow.document.close();
    receiptWindow.focus();
  };

  const generateProfessionalDrugLabels = () => {
    if (!currentPatient || editablePrices.drugs.length === 0) {
      setSnackbar({
        open: true,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏â‡∏•‡∏≤‡∏Å',
        severity: 'error'
      });
      return;
    }

    const labelWindow = window.open('', '_blank', 'width=1200,height=800');

    const labelsHTML = `
      <!DOCTYPE html>
      <html>
      <head>
          <meta charset="UTF-8">
          <title>‡∏â‡∏•‡∏≤‡∏Å‡∏¢‡∏≤ - ${currentPatient.PRENAME}${currentPatient.NAME1} ${currentPatient.SURNAME}</title>
          <link href="https://fonts.googleapis.com/css2?family=Sarabun:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
              * {
                  margin: 0;
                  padding: 0;
                  box-sizing: border-box;
              }
              
              body {
                  font-family: 'Sarabun', Arial, sans-serif;
                  font-size: 13px;
                  line-height: 1.4;
                  background: #f0f2f5;
                  padding: 20px;
              }
              
              .labels-container {
                  display: grid;
                  grid-template-columns: repeat(auto-fit, minmax(340px, 1fr));
                  gap: 20px;
                  max-width: 1200px;
                  margin: 0 auto;
              }
              
              .drug-label {
                  width: 340px;
                  height: 480px;
                  background: white;
                  border: 2px solid #1976d2;
                  border-radius: 12px;
                  overflow: hidden;
                  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                  page-break-inside: avoid;
                  display: flex;
                  flex-direction: column;
              }
              
              .label-header {
                  background: linear-gradient(135deg, #1976d2 0%, #1565c0 100%);
                  color: white;
                  padding: 15px;
                  text-align: center;
                  position: relative;
                  overflow: hidden;
              }
              
              .label-header::before {
                  content: 'üíä';
                  position: absolute;
                  left: 15px;
                  top: 50%;
                  transform: translateY(-50%);
                  font-size: 24px;
                  background: white;
                  color: #1976d2;
                  width: 40px;
                  height: 40px;
                  border-radius: 50%;
                  display: flex;
                  align-items: center;
                  justify-content: center;
              }
              
              .clinic-title {
                  font-size: 18px;
                  font-weight: 700;
                  margin-bottom: 2px;
                  letter-spacing: 0.5px;
              }
              
              .clinic-subtitle {
                  font-size: 11px;
                  opacity: 0.95;
                  margin-bottom: 2px;
              }
              
              .clinic-phone {
                  font-size: 12px;
                  font-weight: 500;
              }
              
              .label-content {
                  padding: 18px;
                  flex: 1;
                  display: flex;
                  flex-direction: column;
              }
              
              .patient-section {
                  background: #f8f9fa;
                  border-radius: 8px;
                  padding: 12px;
                  margin-bottom: 15px;
                  border-left: 4px solid #1976d2;
              }
              
              .patient-row {
                  display: flex;
                  justify-content: space-between;
                  align-items: center;
                  margin-bottom: 6px;
                  font-size: 12px;
              }
              
              .patient-row:last-child {
                  margin-bottom: 0;
              }
              
              .patient-label {
                  color: #666;
                  font-weight: 500;
                  min-width: 60px;
              }
              
              .patient-value {
                  font-weight: 600;
                  color: #333;
                  flex: 1;
                  margin: 0 8px;
              }
              
              .drug-name-section {
                  text-align: center;
                  margin-bottom: 15px;
              }
              
              .drug-name {
                  font-size: 16px;
                  font-weight: 700;
                  color: #1976d2;
                  background: #e3f2fd;
                  padding: 8px 12px;
                  border-radius: 6px;
                  border: 1px solid #bbdefb;
              }
              
              .dosage-section {
                  background: #fff3e0;
                  border-radius: 8px;
                  padding: 12px;
                  margin-bottom: 15px;
                  border: 1px solid #ffcc02;
              }
              
              .dosage-title {
                  font-size: 13px;
                  font-weight: 600;
                  color: #f57c00;
                  text-align: center;
                  margin-bottom: 8px;
              }
              
              .dosage-info {
                  display: flex;
                  justify-content: center;
                  align-items: center;
                  gap: 20px;
                  flex-wrap: wrap;
              }
              
              .dosage-item {
                  text-align: center;
              }
              
              .dosage-number {
                  font-size: 18px;
                  font-weight: 700;
                  color: #d32f2f;
                  display: block;
              }
              
              .dosage-label {
                  font-size: 11px;
                  color: #666;
              }
              
              .time-grid {
                  display: grid;
                  grid-template-columns: repeat(4, 1fr);
                  gap: 8px;
                  margin: 12px 0;
              }
              
              .time-slot {
                  text-align: center;
                  padding: 6px 4px;
                  border-radius: 6px;
                  font-size: 10px;
                  border: 1px solid #e0e0e0;
                  background: white;
              }
              
              .time-slot.active {
                  background: #e3f2fd;
                  border-color: #1976d2;
                  color: #1976d2;
                  font-weight: 600;
              }
              
              .time-icon {
                  display: block;
                  font-size: 14px;
                  margin-bottom: 2px;
              }
              
              .meal-timing {
                  margin: 12px 0;
              }
              
              .meal-option {
                  display: flex;
                  align-items: center;
                  margin-bottom: 4px;
                  font-size: 11px;
              }
              
              .meal-checkbox {
                  width: 12px;
                  height: 12px;
                  border: 1px solid #1976d2;
                  border-radius: 2px;
                  margin-right: 6px;
                  position: relative;
                  background: white;
              }
              
              .meal-checkbox.checked {
                  background: #1976d2;
              }
              
              .meal-checkbox.checked::after {
                  content: '‚úì';
                  position: absolute;
                  top: -2px;
                  left: 2px;
                  color: white;
                  font-size: 10px;
                  font-weight: bold;
              }
              
              .meal-text {
                  flex: 1;
              }
              
              .meal-english {
                  color: #666;
                  font-size: 9px;
                  margin-left: auto;
              }
              
              .instructions-section {
                  background: #f1f8e9;
                  border-radius: 8px;
                  padding: 12px;
                  margin-top: auto;
                  border: 1px solid #c8e6c9;
              }
              
              .instructions-title {
                  font-size: 12px;
                  font-weight: 600;
                  color: #388e3c;
                  margin-bottom: 8px;
              }
              
              .instructions-grid {
                  display: grid;
                  grid-template-columns: 1fr 1fr;
                  gap: 6px;
                  font-size: 9px;
                  color: #555;
              }
              
              .instruction-item {
                  display: flex;
                  align-items: flex-start;
                  line-height: 1.3;
              }
              
              .instruction-checkbox {
                  width: 10px;
                  height: 10px;
                  border: 1px solid #388e3c;
                  border-radius: 1px;
                  margin-right: 4px;
                  margin-top: 1px;
                  flex-shrink: 0;
                  background: white;
              }
              
              .instruction-checkbox.checked {
                  background: #388e3c;
              }
              
              .instruction-checkbox.checked::after {
                  content: '‚úì';
                  position: absolute;
                  color: white;
                  font-size: 7px;
                  font-weight: bold;
                  margin-left: -8px;
                  margin-top: -1px;
              }
              
              .expiry-section {
                  text-align: center;
                  margin-top: 15px;
                  padding-top: 12px;
                  border-top: 1px solid #e0e0e0;
              }
              
              .expiry-text {
                  font-size: 11px;
                  color: #666;
              }
              
              .expiry-date {
                  font-weight: 600;
                  color: #d32f2f;
                  margin-left: 5px;
              }
              
              .print-controls {
                  position: fixed;
                  top: 20px;
                  right: 20px;
                  z-index: 1000;
                  display: flex;
                  gap: 10px;
              }
              
              .print-btn {
                  background: linear-gradient(135deg, #1976d2 0%, #1565c0 100%);
                  color: white;
                  border: none;
                  padding: 10px 20px;
                  border-radius: 20px;
                  font-size: 14px;
                  font-weight: 600;
                  cursor: pointer;
                  box-shadow: 0 2px 8px rgba(25,118,210,0.3);
                  transition: all 0.3s ease;
                  font-family: 'Sarabun', Arial, sans-serif;
              }
              
              .print-btn:hover {
                  transform: translateY(-2px);
                  box-shadow: 0 4px 12px rgba(25,118,210,0.4);
              }
              
              .close-btn {
                  background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
              }
              
              .close-btn:hover {
                  box-shadow: 0 4px 12px rgba(244,67,54,0.4);
              }
              
              @media print {
                  body {
                      background: white;
                      padding: 10px;
                  }
                  
                  .print-controls {
                      display: none !important;
                  }
                  
                  .labels-container {
                      gap: 15px;
                  }
                  
                  .drug-label {
                      box-shadow: none;
                      border-width: 1px;
                  }
              }
              
              @page {
                  margin: 10mm;
                  size: A4;
              }
          </style>
      </head>
      <body>
          <div class="print-controls">
              <button class="print-btn" onclick="window.print()">
                  üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏â‡∏•‡∏≤‡∏Å‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${editablePrices.drugs.length} ‡∏â‡∏•‡∏≤‡∏Å)
              </button>
              <button class="print-btn close-btn" onclick="window.close()">
                  ‚ùå ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
              </button>
          </div>
          
          <div class="labels-container">
              ${editablePrices.drugs.map((drug, index) => {
      const dosage = drug.DOSAGE || '1';
      const frequency = parseInt(drug.FREQUENCY || '3');
      const quantity = drug.QTY || 1;
      const unit = drug.UNIT_CODE || '‡πÄ‡∏°‡πá‡∏î';
      const drugName = drug.GENERIC_NAME || drug.DRUG_CODE || '‡∏¢‡∏≤';
      const expireDate = drug.EXPIRE_DATE || '31/12/2025';

      return `
                  <div class="drug-label">
                      <div class="label-header">
                          <div class="clinic-title">‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Ñ ‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏°</div>
                          <div class="clinic-subtitle">280/4 ‡∏ï.‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏ß‡∏á ‡∏≠.‡∏à‡∏≠‡∏°‡∏ó‡∏≠‡∏á ‡∏à.‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 50160</div>
                          <div class="clinic-phone">‡πÇ‡∏ó‡∏£: 053-341-723</div>
                      </div>
                      
                      <div class="label-content">
                          <div class="patient-section">
                              <div class="patient-row">
                                  <span class="patient-label">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</span>
                                  <span class="patient-value">${currentPatient.PRENAME}${currentPatient.NAME1} ${currentPatient.SURNAME}</span>
                                  <span class="patient-label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</span>
                                  <span class="patient-value">${new Date().toLocaleDateString('th-TH', { day: '2-digit', month: '2-digit', year: '2-digit' })}</span>
                              </div>
                              <div class="patient-row">
                                  <span class="patient-label">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</span>
                                  <span class="patient-value">HN: ${currentPatient.HNCODE} VN: ${currentPatient.VNO}</span>
                                  <span class="patient-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</span>
                                  <span class="patient-value">${quantity} ${unit}</span>
                              </div>
                          </div>
                          
                          <div class="drug-name-section">
                              <div class="drug-name">${drugName}</div>
                          </div>
                          
                          <div class="dosage-section">
                              <div class="dosage-title">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤</div>
                              <div class="dosage-info">
                                  <div class="dosage-item">
                                      <span class="dosage-number">${dosage}</span>
                                      <span class="dosage-label">‡πÄ‡∏°‡πá‡∏î/‡∏Ñ‡∏£‡∏±‡πâ‡∏á</span>
                                  </div>
                                  <div class="dosage-item">
                                      <span class="dosage-number">${frequency}</span>
                                      <span class="dosage-label">‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô</span>
                                  </div>
                              </div>
                          </div>
                          
                          <div class="time-grid">
                              <div class="time-slot ${frequency >= 1 ? 'active' : ''}">
                                  <span class="time-icon">üåÖ</span>
                                  <div>‡πÄ‡∏ä‡πâ‡∏≤<br>Morning</div>
                              </div>
                              <div class="time-slot ${frequency >= 2 ? 'active' : ''}">
                                  <span class="time-icon">‚òÄÔ∏è</span>
                                  <div>‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô<br>Noon</div>
                              </div>
                              <div class="time-slot ${frequency >= 3 ? 'active' : ''}">
                                  <span class="time-icon">üåÜ</span>
                                  <div>‡πÄ‡∏¢‡πá‡∏ô<br>Evening</div>
                              </div>
                              <div class="time-slot ${frequency >= 4 ? 'active' : ''}">
                                  <span class="time-icon">üåô</span>
                                  <div>‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≠‡∏ô<br>Bedtime</div>
                              </div>
                          </div>
                          
                          <div class="meal-timing">
                              <div class="meal-option">
                                  <div class="meal-checkbox"></div>
                                  <span class="meal-text">‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£</span>
                                  <span class="meal-english">Before meal</span>
                              </div>
                              <div class="meal-option">
                                  <div class="meal-checkbox checked"></div>
                                  <span class="meal-text">‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£</span>
                                  <span class="meal-english">After meal</span>
                              </div>
                          </div>
                          
                          <div class="instructions-section">
                              <div class="instructions-title">‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤</div>
                              <div class="instructions-grid">
                                  <div class="instruction-item">
                                      <div class="instruction-checkbox"></div>
                                      <span>‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏£‡∏∂‡πà‡∏á-1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á<br><em>30-60 min before meals</em></span>
                                  </div>
                                  <div class="instruction-item">
                                      <div class="instruction-checkbox checked"></div>
                                      <span>‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏à‡∏ô‡∏´‡∏°‡∏î<br><em>Take until finished</em></span>
                                  </div>
                                  <div class="instruction-item">
                                      <div class="instruction-checkbox"></div>
                                      <span>‡∏ó‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ<br><em>Immediately after meals</em></span>
                                  </div>
                                  <div class="instruction-item">
                                      <div class="instruction-checkbox checked"></div>
                                      <span>‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏Å‡πÜ<br><em>Drink plenty of water</em></span>
                                  </div>
                                  <div class="instruction-item">
                                      <div class="instruction-checkbox"></div>
                                      <span>‡∏¢‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏á‡πà‡∏ß‡∏á‡∏ã‡∏∂‡∏°<br><em>May cause drowsiness</em></span>
                                  </div>
                                  <div class="instruction-item">
                                      <div class="instruction-checkbox"></div>
                                      <span>‡∏≠‡∏∑‡πà‡∏ô‡πÜ<br><em>Others</em></span>
                                  </div>
                              </div>
                          </div>
                          
                          <div class="expiry-section">
                              <span class="expiry-text">‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (Exp.)</span>
                              <span class="expiry-date">${expireDate}</span>
                          </div>
                      </div>
                  </div>
                  `;
    }).join('')}
          </div>
      </body>
      </html>
    `;

    labelWindow.document.write(labelsHTML);
    labelWindow.document.close();
    labelWindow.focus();
  };

  return (
    <Container maxWidth={false} sx={{ mt: 2, maxWidth: "1600px" }}>
      {/* Header */}
      <Typography sx={{
        fontWeight: '600',
        fontSize: '24px',
        fontFamily: 'Instrument Sans',
        letterSpacing: '1.5px',
        lineHeight: '2',
        textShadow: '1px 1px 2px rgba(0, 0, 0, 0.1)',
        mb: 3
      }}>
        ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô/‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤
      </Typography>

      <Grid container spacing={2}>
        {/* Left Sidebar - Patient Queue */}
        <Grid item xs={12} md={2.5}>
          <PatientQueueSidebar
            patients={patients}
            selectedPatientIndex={selectedPatientIndex}
            onPatientSelect={handlePatientSelect}
            onNextPatient={handleNextPatient}
            onPreviousPatient={handlePreviousPatient}
            onRefresh={loadCompletedPatients}
          />
        </Grid>

        {/* Main Content Area */}
        <Grid item xs={12} md={9.5}>
          {patients.length === 0 ? (
            <Card>
              <CardContent sx={{ textAlign: 'center', py: 8 }}>
                <Typography variant="h5" color="text.secondary" sx={{ mb: 2 }}>
                  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                </Typography>
                <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
                  ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
                </Typography>
                <Button
                  variant="contained"
                  size="large"
                  onClick={() => navigate('/clinic/‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤')}
                  sx={{ px: 4, py: 1.5 }}
                >
                  ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤
                </Button>
              </CardContent>
            </Card>
          ) : (
            <Card sx={{ borderRadius: '16px' }}>
              {/* Tabs */}
              <Tabs
                value={tabIndex}
                onChange={(event, newIndex) => setTabIndex(newIndex)}
                variant="standard"
                sx={{
                  backgroundColor: 'transparent',
                  backgroundImage: 'linear-gradient(135deg, #5698E0 0%, #2B69AC 100%)',
                  borderRadius: '16px',
                  padding: '12px',
                  boxShadow: '0 8px 32px rgba(86, 152, 224, 0.25)',
                  border: '1px solid rgba(255, 255, 255, 0.2)',
                  backdropFilter: 'blur(10px)',
                  mb: 2,
                  '& .MuiTabs-flexContainer': {
                    gap: '12px',
                    justifyContent: 'flex-start',
                    alignItems: 'stretch'
                  },
                  '& .MuiTab-root': {
                    color: 'rgba(255, 255, 255, 0.85)',
                    fontWeight: 600,
                    fontSize: '14px',
                    textAlign: 'center',
                    minWidth: 160,
                    maxWidth: 200,
                    borderRadius: '14px',
                    padding: '16px 20px',
                    textTransform: 'none',
                    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                    background: 'rgba(255, 255, 255, 0.1)',
                    backdropFilter: 'blur(10px)',
                    border: '1px solid rgba(255, 255, 255, 0.25)',
                    '&:hover': {
                      background: 'rgba(255, 255, 255, 0.2)',
                      color: 'white',
                      transform: 'translateY(-2px)',
                      boxShadow: '0 12px 30px rgba(0, 0, 0, 0.2)'
                    }
                  },
                  '& .Mui-selected': {
                    background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%) !important',
                    color: '#2B69AC !important',
                    fontWeight: '700 !important',
                    transform: 'translateY(-3px)',
                    boxShadow: '0 12px 35px rgba(255, 255, 255, 0.5), inset 0 1px 0 rgba(255, 255, 255, 0.8)',
                    border: '1px solid rgba(255, 255, 255, 0.9)'
                  },
                  '& .MuiTabs-indicator': {
                    display: 'none'
                  }
                }}
              >
                <Tab label="üí∞ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô/‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤" />
                <Tab label="üßæ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à" />
                <Tab label="üíä ‡∏â‡∏•‡∏≤‡∏Å‡∏¢‡∏≤" />
              </Tabs>

              <CardContent>
                {/* Tab 0: Payment */}
                {tabIndex === 0 && (
                  <Grid container spacing={3}>
                    {/* Patient Info Header */}
                    {currentPatient && (
                      <Grid item xs={12}>
                        <PatientInfoHeader patient={currentPatient} />
                      </Grid>
                    )}

                    {/* Treatment Details */}
                    <Grid item xs={12}>
                      {loadingTreatment ? (
                        <Box sx={{ textAlign: 'center', py: 8 }}>
                          <CircularProgress size={60} sx={{ color: '#5698E0' }} />
                          <Typography variant="h6" sx={{ mt: 2, color: '#2B69AC' }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤...</Typography>
                        </Box>
                      ) : treatmentData ? (
                        <Box>
                          {/* Lab & Procedures + Payment Summary */}
                          <Grid container spacing={3} sx={{ mb: 4 }}>
                            <Grid item xs={12} lg={8}>
                              <LabProceduresTable
                                editablePrices={editablePrices}
                                editingItem={editingItem}
                                onEditPrice={handleEditPrice}
                                onSavePrice={handleSavePrice}
                                onCancelEdit={handleCancelEdit}
                              />
                            </Grid>
                            <Grid item xs={12} lg={4}>
                              <PaymentSummaryCard
                                editablePrices={editablePrices}
                                paymentData={paymentData}
                                onPaymentDataChange={setPaymentData}
                                onPayment={handlePayment}
                                loading={false}
                              />
                            </Grid>
                          </Grid>

                          {/* Drugs Table */}
                          <DrugsTable
                            editablePrices={editablePrices}
                            editingItem={editingItem}
                            onEditPrice={handleEditPrice}
                            onSavePrice={handleSavePrice}
                            onCancelEdit={handleCancelEdit}
                          />

                          {/* Print Buttons */}
                          <Card elevation={2} sx={{ borderRadius: '12px', bgcolor: '#f8f9fa' }}>
                            <CardContent>
                              <Typography variant="h6" sx={{ mb: 3, textAlign: 'center', color: '#2B69AC' }}>
                                üñ®Ô∏è ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
                              </Typography>
                              <Box sx={{ display: "flex", justifyContent: "center", gap: 3, flexWrap: 'wrap' }}>
                                <Button
                                  variant="contained"
                                  startIcon={<span>üßæ</span>}
                                  onClick={() => setTabIndex(1)}
                                  disabled={calculateTotalFromEditablePrices() === 0}
                                  sx={{
                                    backgroundColor: "#5698E0",
                                    height: 48,
                                    minWidth: 160,
                                    borderRadius: 3,
                                    fontSize: '1rem',
                                    fontWeight: 600,
                                    '&:hover': { backgroundColor: "#2B69AC" }
                                  }}
                                >
                                  ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
                                </Button>

                                <Button
                                  variant="contained"
                                  startIcon={<span>üíä</span>}
                                  onClick={() => setTabIndex(2)}
                                  disabled={editablePrices.drugs.length === 0}
                                  sx={{
                                    backgroundColor: "#2B69AC",
                                    height: 48,
                                    minWidth: 160,
                                    borderRadius: 3,
                                    fontSize: '1rem',
                                    fontWeight: 600,
                                    '&:hover': { backgroundColor: "#1e5a94" }
                                  }}
                                >
                                  ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏â‡∏•‡∏≤‡∏Å‡∏¢‡∏≤
                                </Button>
                              </Box>
                            </CardContent>
                          </Card>
                        </Box>
                      ) : (
                        <Alert severity="warning" sx={{ borderRadius: '12px', p: 3 }}>
                          {currentPatient ? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏¢‡∏ô‡∏µ‡πâ' : '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤'}
                        </Alert>
                      )}
                    </Grid>
                  </Grid>
                )}

                {/* Tab 1: Receipt */}
                {/* Tab 1: Receipt */}
                {tabIndex === 1 && (
                  <Box>
                    <Typography variant="h5" sx={{ mb: 3, textAlign: 'center', color: '#1976d2' }}>
                      üßæ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
                    </Typography>

                    {currentPatient && treatmentData ? (
                      <Paper sx={{ p: 4, maxWidth: 600, mx: 'auto' }} id="receipt-print">
                        {/* Receipt Header */}
                        <Box sx={{ textAlign: 'center', mb: 3, borderBottom: '2px solid #1976d2', pb: 2 }}>
                          <Typography variant="h5" fontWeight="bold">‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Ñ</Typography>
                          <Typography variant="body2">280 ‡∏´‡∏°‡∏π‡πà 4 ‡∏ñ‡∏ô‡∏ô ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà-‡∏Æ‡∏≠‡∏î ‡∏ï.‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏ß‡∏á ‡∏≠. ‡∏à‡∏≠‡∏°‡∏ó‡∏≠‡∏á ‡∏à. ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 50160</Typography>
                          <Typography variant="body2">Tel: 053-826-524</Typography>
                        </Box>

                        {/* Patient Info */}
                        <Grid container spacing={2} sx={{ mb: 3 }}>
                          <Grid item xs={6}>
                            <Typography variant="body2"><strong>VN:</strong> {currentPatient.VNO}</Typography>
                            <Typography variant="body2"><strong>HN:</strong> {currentPatient.HNCODE}</Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="body2"><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> {new Date().toLocaleDateString('th-TH')}</Typography>
                            <Typography variant="body2"><strong>‡πÄ‡∏ß‡∏•‡∏≤:</strong> {new Date().toLocaleTimeString('th-TH')}</Typography>
                          </Grid>
                          <Grid item xs={12}>
                            <Typography variant="body2">
                              <strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢:</strong> {currentPatient.PRENAME} {currentPatient.NAME1} {currentPatient.SURNAME}
                            </Typography>
                          </Grid>
                        </Grid>

                        {/* Items Table */}
                        <TableContainer sx={{ mb: 3 }}>
                          <Table size="small">
                            <TableHead>
                              <TableRow sx={{ bgcolor: '#f5f5f5' }}>
                                <TableCell><strong>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</strong></TableCell>
                                <TableCell align="center"><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</strong></TableCell>
                                <TableCell align="right"><strong>‡∏£‡∏≤‡∏Ñ‡∏≤</strong></TableCell>
                              </TableRow>
                            </TableHead>
                            <TableBody>
                              {editablePrices.labs.map((lab, index) => (
                                <TableRow key={`lab-${index}`}>
                                  <TableCell>{lab.LABNAME || lab.LABCODE}</TableCell>
                                  <TableCell align="center">1</TableCell>
                                  <TableCell align="right">{lab.editablePrice.toFixed(2)}</TableCell>
                                </TableRow>
                              ))}
                              {editablePrices.procedures.map((proc, index) => (
                                <TableRow key={`proc-${index}`}>
                                  <TableCell>{proc.MED_PRO_NAME_THAI || proc.PROCEDURE_NAME || proc.MEDICAL_PROCEDURE_CODE}</TableCell>
                                  <TableCell align="center">1</TableCell>
                                  <TableCell align="right">{proc.editablePrice.toFixed(2)}</TableCell>
                                </TableRow>
                              ))}
                              {editablePrices.drugs.map((drug, index) => (
                                <TableRow key={`drug-${index}`}>
                                  <TableCell>{drug.GENERIC_NAME || drug.DRUG_CODE}</TableCell>
                                  <TableCell align="center">{drug.QTY || 0} {drug.UNIT_CODE || ''}</TableCell>
                                  <TableCell align="right">{drug.editablePrice.toFixed(2)}</TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                        </TableContainer>

                        {/* Total */}
                        <Box sx={{ borderTop: '2px solid #ddd', pt: 2 }}>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                            <Typography>‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤:</Typography>
                            <Typography>{calculateTotalFromEditablePrices().toFixed(2)} ‡∏ö‡∏≤‡∏ó</Typography>
                          </Box>
                          {paymentData.discount > 0 && (
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                              <Typography>‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î:</Typography>
                              <Typography>-{paymentData.discount.toFixed(2)} ‡∏ö‡∏≤‡∏ó</Typography>
                            </Box>
                          )}
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2, fontSize: '1.2rem', fontWeight: 'bold' }}>
                            <Typography variant="h6">‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞:</Typography>
                            <Typography variant="h6" color="primary">{calculateTotal().toFixed(2)} ‡∏ö‡∏≤‡∏ó</Typography>
                          </Box>
                        </Box>

                        {/* Print Button */}
                        <Box sx={{ textAlign: 'center', mt: 3, '@media print': { display: 'none' } }}>
                          <Button
                            variant="contained"
                            startIcon={<PrintIcon />}
                            onClick={generateProfessionalReceipt}
                            sx={{
                              backgroundColor: "#1976d2",
                              '&:hover': { backgroundColor: "#1565c0" },
                              px: 3,
                              py: 1.5
                            }}
                          >
                            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
                          </Button>
                        </Box>
                      </Paper>
                    ) : (
                      <Alert severity="info">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à</Alert>
                    )}
                  </Box>
                )}

                {/* Tab 2: Drug Labels */}

                {tabIndex === 2 && (
                  <Box>
                    <Typography variant="h5" sx={{ mb: 3, textAlign: 'center', color: '#1976d2' }}>
                      üè∑Ô∏è ‡∏â‡∏•‡∏≤‡∏Å‡∏¢‡∏≤
                    </Typography>

                    {currentPatient && editablePrices.drugs.length > 0 ? (
                      <Box>
                        <Grid container spacing={2} sx={{ mb: 3 }}>
                          {editablePrices.drugs.map((drug, index) => (
                            <Grid item xs={12} md={6} lg={4} key={index}>
                              <Box sx={{
                                width: '320px',
                                minHeight: '450px',
                                background: 'white',
                                border: '2px solid #4a90e2',
                                margin: '10px auto',
                                boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
                                fontFamily: 'Sarabun, sans-serif'
                              }}>
                                {/* Header ‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å */}
                                <Box sx={{
                                  background: 'linear-gradient(135deg, #4a90e2 0%, #357abd 100%)',
                                  color: 'white',
                                  padding: '12px',
                                  textAlign: 'center',
                                  position: 'relative'
                                }}>
                                  <Box sx={{
                                    position: 'absolute',
                                    left: '15px',
                                    top: '50%',
                                    transform: 'translateY(-50%)',
                                    width: '40px',
                                    height: '40px',
                                    background: 'white',
                                    borderRadius: '50%',
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    fontSize: '20px',
                                    color: '#4a90e2'
                                  }}>
                                    üíä
                                  </Box>
                                  <Typography sx={{ fontSize: '18px', fontWeight: 700, margin: 0, letterSpacing: '0.5px' }}>
                                    ‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Ñ ‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏°
                                  </Typography>
                                  <Typography sx={{ fontSize: '11px', margin: '2px 0', opacity: 0.95 }}>
                                    280/4 ‡∏ï.‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏ß‡∏á ‡∏≠.‡∏à‡∏≠‡∏°‡∏ó‡∏≠‡∏á ‡∏à.‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 50160
                                  </Typography>
                                  <Typography sx={{ fontSize: '12px', margin: 0, fontWeight: 500 }}>
                                    ‡πÇ‡∏ó‡∏£ : 053-341-723
                                  </Typography>
                                </Box>

                                {/* ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏â‡∏•‡∏≤‡∏Å */}
                                <Box sx={{ padding: '15px' }}>
                                  {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ */}
                                  <Box sx={{ borderBottom: '1px solid #e0e0e0', paddingBottom: '10px', marginBottom: '15px' }}>
                                    <Box sx={{ display: 'flex', justifyContent: 'space-between', margin: '3px 0', fontSize: '13px' }}>
                                      <span style={{ color: '#666', minWidth: '40px' }}>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</span>
                                      <span style={{ flex: 1, margin: '0 10px', fontWeight: 600, color: '#333' }}>
                                        {currentPatient.PRENAME}{currentPatient.NAME1} {currentPatient.SURNAME}
                                      </span>
                                      <span style={{ color: '#666' }}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</span>
                                      <span style={{ marginLeft: '5px', fontWeight: 600 }}>
                                        {new Date().toLocaleDateString('th-TH', { day: '2-digit', month: '2-digit', year: '2-digit' })}
                                      </span>
                                    </Box>
                                    <Box sx={{ display: 'flex', justifyContent: 'space-between', margin: '8px 0 3px 0', fontSize: '13px' }}>
                                      <span style={{ color: '#666', minWidth: '40px' }}>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</span>
                                      <span style={{ flex: 1, margin: '0 10px', fontWeight: 600, color: '#333' }}>
                                        HN: {currentPatient.HNCODE} VN: {currentPatient.VNO}
                                      </span>
                                      <span style={{ color: '#666' }}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</span>
                                      <span style={{ marginLeft: '5px', fontWeight: 600 }}>
                                        {drug.QTY} {drug.UNIT_CODE}
                                      </span>
                                    </Box>
                                    <Box sx={{ display: 'flex', justifyContent: 'space-between', margin: '8px 0 3px 0', fontSize: '13px' }}>
                                      <span style={{ color: '#666', minWidth: '40px' }}>‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡πÉ‡∏ä‡πâ</span>
                                      <span style={{ flex: 1, marginLeft: '10px', fontWeight: 600, color: '#2c5aa0' }}>
                                        {drug.GENERIC_NAME || drug.DRUG_CODE}
                                      </span>
                                    </Box>
                                  </Box>

                                  {/* ‡∏™‡πà‡∏ß‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤ */}
                                  <Box sx={{ marginTop: '15px' }}>
                                    <Typography sx={{ fontSize: '13px', fontWeight: 600, color: '#2c5aa0', marginBottom: '8px', textAlign: 'center' }}>
                                      ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ <span style={{ fontWeight: 700, color: '#e74c3c' }}>
                                        {drug.DOSAGE || '1'}
                                      </span> ‡πÄ‡∏°‡πá‡∏î &nbsp;&nbsp;&nbsp;&nbsp; ‡∏ß‡∏±‡∏ô‡∏•‡∏∞ <span style={{ fontWeight: 700, color: '#e74c3c' }}>
                                        {drug.FREQUENCY || '3'}
                                      </span> ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                                    </Typography>

                                    {/* ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ */}
                                    <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: '8px', margin: '10px 0' }}>
                                      <Box sx={{ textAlign: 'center', fontSize: '11px', color: '#666' }}>
                                        <span style={{ fontSize: '16px', display: 'block', marginBottom: '2px' }}>üåÖ</span>
                                        <div style={{ fontSize: '10px' }}>‡πÄ‡∏ä‡πâ‡∏≤<br />Breakfast</div>
                                      </Box>
                                      <Box sx={{
                                        textAlign: 'center',
                                        fontSize: '11px',
                                        color: '#666',
                                        ...(drug.TIME1?.includes('‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô') || drug.FREQUENCY >= 2 ?
                                          { background: '#e8f4fd', borderRadius: '4px', padding: '4px', color: '#2c5aa0', fontWeight: 600 } : {})
                                      }}>
                                        <span style={{ fontSize: '16px', display: 'block', marginBottom: '2px' }}>‚òÄÔ∏è</span>
                                        <div style={{ fontSize: '10px' }}>‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô<br />Lunch</div>
                                      </Box>
                                      <Box sx={{
                                        textAlign: 'center',
                                        fontSize: '11px',
                                        color: '#666',
                                        ...(drug.TIME1?.includes('‡πÄ‡∏¢‡πá‡∏ô') || drug.FREQUENCY >= 3 ?
                                          { background: '#e8f4fd', borderRadius: '4px', padding: '4px', color: '#2c5aa0', fontWeight: 600 } : {})
                                      }}>
                                        <span style={{ fontSize: '16px', display: 'block', marginBottom: '2px' }}>üåÜ</span>
                                        <div style={{ fontSize: '10px' }}>‡πÄ‡∏¢‡πá‡∏ô<br />Dinner</div>
                                      </Box>
                                      <Box sx={{ textAlign: 'center', fontSize: '11px', color: '#666' }}>
                                        <span style={{ fontSize: '16px', display: 'block', marginBottom: '2px' }}>üåô</span>
                                        <div style={{ fontSize: '10px' }}>‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≠‡∏ô<br />At bedtime</div>
                                      </Box>
                                    </Box>

                                    {/* ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£ */}
                                    <Box sx={{ margin: '10px 0' }}>
                                      <Box sx={{ display: 'flex', alignItems: 'center', margin: '3px 0', fontSize: '11px' }}>
                                        <Box sx={{ width: '12px', height: '12px', border: '1px solid #4a90e2', marginRight: '6px', borderRadius: '2px' }}></Box>
                                        <span>‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£</span>
                                        <span style={{ flex: 1, textAlign: 'right', fontSize: '10px' }}>Before meal</span>
                                      </Box>
                                      <Box sx={{ display: 'flex', alignItems: 'center', margin: '3px 0', fontSize: '11px' }}>
                                        <Box sx={{
                                          width: '12px',
                                          height: '12px',
                                          border: '1px solid #4a90e2',
                                          marginRight: '6px',
                                          borderRadius: '2px',
                                          background: '#2c5aa0',
                                          position: 'relative'
                                        }}>
                                          <span style={{ color: 'white', fontSize: '8px', position: 'absolute', top: '1px', left: '3px' }}>‚úì</span>
                                        </Box>
                                        <span style={{ fontWeight: 600, color: '#2c5aa0' }}>‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£</span>
                                        <span style={{ flex: 1, textAlign: 'right', fontSize: '10px', color: '#2c5aa0' }}>After meal</span>
                                      </Box>
                                    </Box>

                                    <Box sx={{ display: 'flex', justifyContent: 'space-between', margin: '10px 0', fontSize: '11px' }}>
                                      <span>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£</span>
                                      <span style={{ flex: 1, margin: '0 10px', fontWeight: 600, color: '#e74c3c' }}>
                                        {drug.NOTE1?.includes('‡πÄ‡∏°‡∏∑‡πà‡∏≠') ? drug.NOTE1 : '‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏™‡∏±‡πà‡∏á'}
                                      </span>
                                      <span>‡∏ó‡∏∏‡∏Å</span>
                                      <span style={{ margin: '0 5px', fontWeight: 600, color: '#e74c3c' }}>6</span>
                                      <span>‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</span>
                                    </Box>

                                    {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ */}
                                    <Box sx={{ borderTop: '1px solid #ccc', margin: '10px 0', paddingTop: '10px' }}>
                                      <Typography sx={{ fontSize: '12px', fontWeight: 600, marginBottom: '8px', color: '#2c5aa0' }}>
                                        ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                                      </Typography>

                                      <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '6px', fontSize: '10px', color: '#555' }}>
                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                          <Box sx={{ width: '10px', height: '10px', border: '1px solid #4a90e2', marginRight: '4px', borderRadius: '1px' }}></Box>
                                          <span>‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏£‡∏∂‡πà‡∏á-‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á<br /><span style={{ fontSize: '9px' }}>30-60 minutes before meals</span></span>
                                        </Box>
                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                          <Box sx={{
                                            width: '10px',
                                            height: '10px',
                                            border: '1px solid #4a90e2',
                                            marginRight: '4px',
                                            borderRadius: '1px',
                                            background: '#2c5aa0',
                                            position: 'relative'
                                          }}>
                                            <span style={{ color: 'white', fontSize: '6px', position: 'absolute', top: '1px', left: '2px' }}>‚úì</span>
                                          </Box>
                                          <span style={{ fontWeight: 600, color: '#2c5aa0' }}>‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏à‡∏ô‡∏´‡∏°‡∏î<br /><span style={{ fontSize: '9px', color: '#2c5aa0' }}>Take this medicine until finished</span></span>
                                        </Box>
                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                          <Box sx={{ width: '10px', height: '10px', border: '1px solid #4a90e2', marginRight: '4px', borderRadius: '1px' }}></Box>
                                          <span>‡∏ó‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ<br /><span style={{ fontSize: '9px' }}>Immediately after meals</span></span>
                                        </Box>
                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                          <Box sx={{
                                            width: '10px',
                                            height: '10px',
                                            border: '1px solid #4a90e2',
                                            marginRight: '4px',
                                            borderRadius: '1px',
                                            background: '#2c5aa0',
                                            position: 'relative'
                                          }}>
                                            <span style={{ color: 'white', fontSize: '6px', position: 'absolute', top: '1px', left: '2px' }}>‚úì</span>
                                          </Box>
                                          <span style={{ fontWeight: 600, color: '#2c5aa0' }}>‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏Å‡πÜ<br /><span style={{ fontSize: '9px', color: '#2c5aa0' }}>Follow with 1-2 glasses of water</span></span>
                                        </Box>
                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                          <Box sx={{ width: '10px', height: '10px', border: '1px solid #4a90e2', marginRight: '4px', borderRadius: '1px' }}></Box>
                                          <span>‡∏¢‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏á‡πà‡∏ß‡∏á‡∏ã‡∏∂‡∏°<br /><span style={{ fontSize: '9px' }}>This drug may cause drowsiness</span></span>
                                        </Box>
                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                          <Box sx={{ width: '10px', height: '10px', border: '1px solid #4a90e2', marginRight: '4px', borderRadius: '1px' }}></Box>
                                          <span>‡∏≠‡∏∑‡πà‡∏ô‡πÜ..............................<br /><span style={{ fontSize: '9px' }}>Others</span></span>
                                        </Box>
                                      </Box>
                                    </Box>

                                    {/* ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ */}
                                    <Box sx={{ marginTop: '15px', paddingTop: '8px', borderTop: '1px solid #e0e0e0', textAlign: 'center' }}>
                                      <Typography sx={{ fontSize: '11px', color: '#666' }}>
                                        ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (Exp.) <span style={{ fontWeight: 600, color: '#e74c3c' }}>
                                          {drug.EXPIRE_DATE || '31/12/2025'}
                                        </span>
                                      </Typography>
                                    </Box>
                                  </Box>
                                </Box>
                              </Box>
                            </Grid>
                          ))}
                        </Grid>

                        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå */}
                        <Box sx={{ textAlign: 'center', mt: 3 }}>
                          <Button
                            variant="contained"
                            startIcon={<span>üíä</span>}
                            onClick={generateProfessionalDrugLabels}
                            disabled={editablePrices.drugs.length === 0}
                            sx={{
                              backgroundColor: "#2B69AC",
                              height: 48,
                              minWidth: 160,
                              borderRadius: 3,
                              fontSize: '1rem',
                              fontWeight: 600,
                              '&:hover': { backgroundColor: "#1e5a94" }
                            }}
                          >
                            ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏â‡∏•‡∏≤‡∏Å‡∏¢‡∏≤
                          </Button>
                        </Box>

                        {/* CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå */}
                        <style jsx>{`
          @media print {
            .MuiContainer-root {
              margin: 0 !important;
              padding: 0 !important;
            }
            .MuiButton-root {
              display: none !important;
            }
            .MuiTabs-root {
              display: none !important;
            }
            .MuiTypography-h5 {
              display: none !important;
            }
          }
        `}</style>
                      </Box>
                    ) : (
                      <Alert severity="info" sx={{ borderRadius: '12px', textAlign: 'center', py: 4 }}>
                        {!currentPatient ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏â‡∏•‡∏≤‡∏Å‡∏¢‡∏≤' : '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏¢‡∏≤'}
                      </Alert>
                    )}
                  </Box>
                )}
              </CardContent>
            </Card>
          )}
        </Grid>
      </Grid>

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
      >
        <Alert
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          severity={snackbar.severity}
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default Paymentanddispensingmedicine;