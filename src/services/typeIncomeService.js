// services/typeIncomeService.js
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';

class TypeIncomeService {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    static async getAllTypeIncome() {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/typeincome`);
            const response = await fetch(`${API_BASE_URL}/typeincome`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error fetching income types:', error);
            throw error;
        }
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™
    static async getTypeIncomeByCode(code) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/typeincome/${code}`);
            const response = await fetch(`${API_BASE_URL}/typeincome/${code}`);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error fetching income type:', error);
            throw error;
        }
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
    static async searchTypeIncome(searchTerm) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/typeincome/search/${encodeURIComponent(searchTerm)}`);
            const response = await fetch(`${API_BASE_URL}/typeincome/search/${encodeURIComponent(searchTerm)}`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error searching income types:', error);
            throw error;
        }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    static async checkCodeExists(code) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/typeincome/check/${code}`);
            const response = await fetch(`${API_BASE_URL}/typeincome/check/${code}`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error checking income type code:', error);
            throw error;
        }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
    static async createTypeIncome(data) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/typeincome`);
            const response = await fetch(`${API_BASE_URL}/typeincome`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error creating income type:', error);
            throw error;
        }
    }

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
    static async updateTypeIncome(code, data) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/typeincome/${code}`);
            const response = await fetch(`${API_BASE_URL}/typeincome/${code}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error updating income type:', error);
            throw error;
        }
    }

    // ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
    static async deleteTypeIncome(code) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/typeincome/${code}`);
            const response = await fetch(`${API_BASE_URL}/typeincome/${code}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error deleting income type:', error);
            throw error;
        }
    }

    // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ endpoint)
    static async getTypeIncomeStats() {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/typeincome/stats/summary`);
            const response = await fetch(`${API_BASE_URL}/typeincome/stats/summary`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error fetching income type stats:', error);
            throw error;
        }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    static validateTypeIncomeData(data, isEditing = false) {
        const errors = [];

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™ - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô EDIT ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if (isEditing) {
            if (!data.TYPE_INCOME_CODE?.trim()) {
                errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö');
            } else if (data.TYPE_INCOME_CODE.length > 3) {
                errors.push('‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
            }
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ó‡∏±‡πâ‡∏á CREATE ‡πÅ‡∏•‡∏∞ EDIT
        if (!data.TYPE_INCOME_NAME?.trim()) {
            errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö');
        } else if (data.TYPE_INCOME_NAME.length > 100) {
            errors.push('‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
        }

        return errors;
    }

    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á API
    static formatTypeIncomeData(data) {
        return {
            TYPE_INCOME_CODE: data.TYPE_INCOME_CODE?.trim().toUpperCase(),
            TYPE_INCOME_NAME: data.TYPE_INCOME_NAME?.trim()
        };
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
    static formatForDropdown(typeIncomeList) {
        return typeIncomeList.map(item => ({
            value: item.TYPE_INCOME_CODE,
            label: `${item.TYPE_INCOME_CODE} - ${item.TYPE_INCOME_NAME}`,
            data: item
        }));
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö select/dropdown
    static toOptions(typeIncomeList) {
        return typeIncomeList.map(item => ({
            value: item.TYPE_INCOME_CODE,
            label: item.TYPE_INCOME_NAME,
            code: item.TYPE_INCOME_CODE,
            name: item.TYPE_INCOME_NAME
        }));
    }

    // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô CSV
    static exportToCSV(typeIncomeList) {
        const headers = ['‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö', '‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö'];

        const rows = typeIncomeList.map(item => [
            item.TYPE_INCOME_CODE,
            item.TYPE_INCOME_NAME
        ]);

        const csvContent = [headers, ...rows]
            .map(row => row.map(field => `"${field || ''}"`).join(','))
            .join('\n');

        return csvContent;
    }

    // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV
    static downloadCSV(typeIncomeList, filename = 'income-types') {
        const csvContent = this.exportToCSV(typeIncomeList);
        const blob = new Blob(['\uFEFF' + csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);

        link.setAttribute('href', url);
        link.setAttribute('download', `${filename}-${new Date().toISOString().slice(0, 10)}.csv`);
        link.style.visibility = 'hidden';

        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (3 ‡∏´‡∏•‡∏±‡∏Å)
    static generateCode(existingCodes = []) {
        // ‡∏´‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        const usedNumbers = existingCodes
            .map(code => parseInt(code))
            .filter(num => !isNaN(num))
            .sort((a, b) => a - b);

        // ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
        let nextNumber = 1;
        for (const num of usedNumbers) {
            if (num === nextNumber) {
                nextNumber++;
            } else {
                break;
            }
        }

        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™ 3 ‡∏´‡∏•‡∏±‡∏Å
        return nextNumber.toString().padStart(3, '0');
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    static filterTypeIncome(typeIncomeList, filterOptions = {}) {
        let filtered = [...typeIncomeList];

        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        if (filterOptions.searchTerm) {
            const search = filterOptions.searchTerm.toLowerCase();
            filtered = filtered.filter(item =>
                item.TYPE_INCOME_CODE.toLowerCase().includes(search) ||
                item.TYPE_INCOME_NAME.toLowerCase().includes(search)
            );
        }

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
        if (filterOptions.sortBy) {
            filtered.sort((a, b) => {
                const aValue = a[filterOptions.sortBy];
                const bValue = b[filterOptions.sortBy];

                if (filterOptions.sortOrder === 'desc') {
                    return bValue > aValue ? 1 : -1;
                } else {
                    return aValue > bValue ? 1 : -1;
                }
            });
        }

        return filtered;
    }

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô)
    static async getUsageCount(code) {
        try {
            // TODO: Implement endpoint for counting usage
            console.log(`Checking usage count for income type: ${code}`);
            return 0;
        } catch (error) {
            console.error('Error getting usage count:', error);
            throw error;
        }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    static async canDelete(code) {
        try {
            const usageCount = await this.getUsageCount(code);
            return usageCount === 0;
        } catch (error) {
            console.error('Error checking if can delete:', error);
            return false;
        }
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    static formatForTable(typeIncomeList) {
        return typeIncomeList.map((item, index) => ({
            no: index + 1,
            code: item.TYPE_INCOME_CODE,
            name: item.TYPE_INCOME_NAME,
            ...item
        }));
    }

    // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô)
    static async getAllFinanceTypes() {
        try {
            const [incomeResponse, payResponse] = await Promise.all([
                this.getAllTypeIncome(),
                fetch(`${API_BASE_URL}/typepay`).then(res => res.json())
            ]);

            return {
                success: true,
                data: {
                    income: incomeResponse.data || [],
                    payment: payResponse.data || []
                }
            };
        } catch (error) {
            console.error('Error fetching all finance types:', error);
            throw error;
        }
    }
}

export default TypeIncomeService;