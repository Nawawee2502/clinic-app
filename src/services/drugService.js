// services/drugService.js

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';

class DrugService {

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö fields ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    static async createDrug(drugData) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/drugs`);
            const response = await fetch(`${API_BASE_URL}/drugs`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(drugData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error creating drug:', error);
            throw error;
        }
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÄ‡∏û‡∏¥‡πà‡∏° filters
    static async getAllDrugs(params = {}) {
        try {
            const queryParams = new URLSearchParams();

            if (params.search) queryParams.append('search', params.search);
            if (params.page) queryParams.append('page', params.page);
            if (params.limit) queryParams.append('limit', params.limit);
            if (params.type) queryParams.append('type', params.type);
            if (params.unit_code) queryParams.append('unit_code', params.unit_code);
            if (params.drug_formulations) queryParams.append('drug_formulations', params.drug_formulations);

            const url = `${API_BASE_URL}/drugs${queryParams.toString() ? '?' + queryParams.toString() : ''}`;
            console.log('üîó Calling API:', url);

            const response = await fetch(url);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error fetching drugs:', error);
            throw error;
        }
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™
    static async getDrugByCode(drugCode) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/drugs/${drugCode}`);
            const response = await fetch(`${API_BASE_URL}/drugs/${drugCode}`);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error fetching drug:', error);
            throw error;
        }
    }

    // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤ - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö fields ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    static async updateDrug(drugCode, drugData) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/drugs/${drugCode}`);
            const response = await fetch(`${API_BASE_URL}/drugs/${drugCode}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(drugData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error updating drug:', error);
            throw error;
        }
    }

    // ‚úÖ ‡∏•‡∏ö‡∏¢‡∏≤
    static async deleteDrug(drugCode) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/drugs/${drugCode}`);
            const response = await fetch(`${API_BASE_URL}/drugs/${drugCode}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error deleting drug:', error);
            throw error;
        }
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤ (Type1)
    static async getDrugTypes() {
        try {
            const response = await fetch(`${API_BASE_URL}/drugs/filters/types`);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return await response.json();
        } catch (error) {
            console.error('Error fetching drug types:', error);
            throw error;
        }
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤ (Drug_formulations)
    static async getDrugFormulations() {
        try {
            const response = await fetch(`${API_BASE_URL}/drugs/filters/formulations`);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return await response.json();
        } catch (error) {
            console.error('Error fetching drug formulations:', error);
            throw error;
        }
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏° TABLE_DRUG
    static validateDrugData(data) {
        const errors = [];

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if (!data.DRUG_CODE?.trim()) {
            errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤');
        }

        if (!data.GENERIC_NAME?.trim()) {
            errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç‡∏¢‡∏≤');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤
        if (data.DRUG_CODE && !/^[A-Z0-9]{3,10}$/.test(data.DRUG_CODE)) {
            errors.push('‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 3-10 ‡∏´‡∏•‡∏±‡∏Å');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
        if (data.UNIT_PRICE && (isNaN(data.UNIT_PRICE) || data.UNIT_PRICE < 0)) {
            errors.push('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        const maxLengths = {
            DRUG_CODE: 10,
            GENERIC_NAME: 100,
            TRADE_NAME: 255,
            UNIT_CODE: 10,
            Type1: 255,
            Dose1: 255,
            Indication1: 255,
            Effect1: 255,
            Contraindications1: 255,
            Comment1: 255,
            Drug_formulations: 255,
            SOCIAL_CARD: 50,
            UCS_CARD: 50
        };

        Object.entries(maxLengths).forEach(([field, maxLength]) => {
            if (data[field] && data[field].length > maxLength) {
                errors.push(`${this.getFieldName(field)} ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô ${maxLength} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£`);
            }
        });

        return errors;
    }

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏° TABLE_DRUG
    static getFieldName(fieldName) {
        const fieldNames = {
            DRUG_CODE: '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤',
            GENERIC_NAME: '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç',
            TRADE_NAME: '‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤',
            UNIT_CODE: '‡∏´‡∏ô‡πà‡∏ß‡∏¢',
            UNIT_PRICE: '‡∏£‡∏≤‡∏Ñ‡∏≤',
            Type1: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó',
            Dose1: '‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤',
            Indication1: '‡∏Ç‡πâ‡∏≠‡∏ö‡πà‡∏á‡πÉ‡∏ä‡πâ',
            Effect1: '‡∏ú‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á',
            Contraindications1: '‡∏Ç‡πâ‡∏≠‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ',
            Comment1: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
            Drug_formulations: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤',
            SOCIAL_CARD: '‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£',
            UCS_CARD: '‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏≠‡∏á'
        };
        return fieldNames[fieldName] || fieldName;
    }

    // ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á API
    static formatDrugData(data) {
        return {
            DRUG_CODE: data.DRUG_CODE?.trim().toUpperCase(),
            GENERIC_NAME: data.GENERIC_NAME?.trim(),
            TRADE_NAME: data.TRADE_NAME?.trim(),
            UNIT_CODE: data.UNIT_CODE?.trim(),
            UNIT_PRICE: data.UNIT_PRICE ? parseFloat(data.UNIT_PRICE) : null,
            Type1: data.Type1?.trim(),
            Dose1: data.Dose1?.trim(),
            Indication1: data.Indication1?.trim(),
            Effect1: data.Effect1?.trim() || 'None',
            Contraindications1: data.Contraindications1?.trim() || 'None',
            Comment1: data.Comment1?.trim() || 'None',
            Drug_formulations: data.Drug_formulations?.trim(),
            SOCIAL_CARD: data.SOCIAL_CARD || 'N',
            UCS_CARD: data.UCS_CARD || 'N'
        };
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏¢‡∏≤
    static getUnitCodes() {
        return [
            { value: '‡πÄ‡∏°‡πá‡∏î', label: '‡πÄ‡∏°‡πá‡∏î' },
            { value: '‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏π‡∏•', label: '‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏π‡∏•' },
            { value: '‡∏Ç‡∏ß‡∏î', label: '‡∏Ç‡∏ß‡∏î' },
            { value: '‡∏´‡∏•‡∏≠‡∏î', label: '‡∏´‡∏•‡∏≠‡∏î' },
            { value: '‡∏Å‡∏•‡πà‡∏≠‡∏á', label: '‡∏Å‡∏•‡πà‡∏≠‡∏á' },
            { value: '‡πÅ‡∏ú‡∏á', label: '‡πÅ‡∏ú‡∏á' },
            { value: 'Amp', label: 'Amp' },
            { value: 'Vial', label: 'Vial' }
        ];
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤
    static getDrugFormulationsList() {
        return [
            { value: 'Tablets', label: '‡πÄ‡∏°‡πá‡∏î (Tablets)' },
            { value: 'Capsules', label: '‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏π‡∏• (Capsules)' },
            { value: 'Topical', label: '‡∏¢‡∏≤‡∏ó‡∏≤‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (Topical)' },
            { value: 'Injections', label: '‡∏¢‡∏≤‡∏â‡∏µ‡∏î (Injections)' },
            { value: '‡∏¢‡∏≤‡∏ô‡πâ‡∏≥', label: '‡∏¢‡∏≤‡∏ô‡πâ‡∏≥' },
            { value: 'Syrup', label: '‡∏¢‡∏≤‡∏ô‡πâ‡∏≥‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° (Syrup)' },
            { value: 'Drops', label: '‡∏¢‡∏≤‡∏´‡∏¢‡∏î (Drops)' },
            { value: 'Spray', label: '‡∏¢‡∏≤‡∏û‡πà‡∏ô (Spray)' }
        ];
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤
    static getDrugTypesList() {
        return [
            { value: '‡∏¢‡∏≤‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢', label: '‡∏¢‡∏≤‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢' },
            { value: '‡∏¢‡∏≤‡∏™‡∏≤‡∏°‡∏±‡∏ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ö‡πâ‡∏≤‡∏ô', label: '‡∏¢‡∏≤‡∏™‡∏≤‡∏°‡∏±‡∏ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ö‡πâ‡∏≤‡∏ô' },
            { value: '‡∏¢‡∏≤‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å', label: '‡∏¢‡∏≤‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å' },
            { value: '‡∏ß‡∏±‡∏ñ‡∏∏‡∏≠‡∏≠‡∏≠‡∏Å‡∏§‡∏ó‡∏ò‡∏¥‡πå', label: '‡∏ß‡∏±‡∏ñ‡∏∏‡∏≠‡∏≠‡∏≠‡∏Å‡∏§‡∏ó‡∏ò‡∏¥‡πå' }
        ];
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    static async generateNextDrugCode() {
        try {
            // ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å API
            const response = await this.getAllDrugs({ limit: 1, page: 1 });
            
            if (response.success && response.data.length > 0) {
                const lastCode = response.data[0].DRUG_CODE;
                // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡πá‡∏ô D0001, D0002, ...
                const match = lastCode.match(/^D(\d+)$/);
                if (match) {
                    const nextNum = parseInt(match[1]) + 1;
                    return `D${nextNum.toString().padStart(4, '0')}`;
                }
            }
            
            return 'D0001'; // ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        } catch (error) {
            console.error('Error generating drug code:', error);
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
            const random = Math.floor(Math.random() * 10000);
            return `D${random.toString().padStart(4, '0')}`;
        }
    }

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
    static calculateTotalPrice(drugs) {
        return drugs.reduce((total, drug) => {
            return total + (parseFloat(drug.UNIT_PRICE) || 0) * (parseInt(drug.QTY) || 0);
        }, 0);
    }

    // ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤
    static formatPrice(price) {
        return new Intl.NumberFormat('th-TH', {
            style: 'currency',
            currency: 'THB',
            minimumFractionDigits: 2
        }).format(price || 0);
    }

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏¢‡∏≤
    static compareDrugs(drug1, drug2) {
        const differences = [];
        
        const fieldsToCompare = [
            'GENERIC_NAME', 'TRADE_NAME', 'UNIT_PRICE', 'Type1', 
            'Dose1', 'Indication1', 'Drug_formulations'
        ];

        fieldsToCompare.forEach(field => {
            if (drug1[field] !== drug2[field]) {
                differences.push({
                    field: this.getFieldName(field),
                    value1: drug1[field],
                    value2: drug2[field]
                });
            }
        });

        return differences;
    }
}

export default DrugService;