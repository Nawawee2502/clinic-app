// services/medicalProcedureService.js

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';

class MedicalProcedureService {

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
    static async createProcedure(procedureData) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/procedures`);
            const response = await fetch(`${API_BASE_URL}/procedures`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(procedureData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error creating procedure:', error);
            throw error;
        }
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    static async getAllProcedures(params = {}) {
        try {
            const queryParams = new URLSearchParams();

            if (params.search) queryParams.append('search', params.search);
            if (params.page) queryParams.append('page', params.page);
            if (params.limit) queryParams.append('limit', params.limit);
            if (params.type) queryParams.append('type', params.type);

            const url = `${API_BASE_URL}/procedures${queryParams.toString() ? '?' + queryParams.toString() : ''}`;
            console.log('üîó Calling API:', url);

            const response = await fetch(url);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error fetching procedures:', error);
            throw error;
        }
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™
    static async getProcedureByCode(procedureCode) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/procedures/${procedureCode}`);
            const response = await fetch(`${API_BASE_URL}/procedures/${procedureCode}`);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error fetching procedure:', error);
            throw error;
        }
    }

    // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£
    static async updateProcedure(procedureCode, procedureData) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/procedures/${procedureCode}`);
            const response = await fetch(`${API_BASE_URL}/procedures/${procedureCode}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(procedureData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error updating procedure:', error);
            throw error;
        }
    }

    // ‚úÖ ‡∏•‡∏ö‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£
    static async deleteProcedure(procedureCode) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/procedures/${procedureCode}`);
            const response = await fetch(`${API_BASE_URL}/procedures/${procedureCode}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error deleting procedure:', error);
            throw error;
        }
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£
    static async getProcedureTypes() {
        try {
            const response = await fetch(`${API_BASE_URL}/procedures/types/list`);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return await response.json();
        } catch (error) {
            console.error('Error fetching procedure types:', error);
            throw error;
        }
    }

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£
    static async searchProcedures(searchTerm) {
        try {
            const response = await fetch(`${API_BASE_URL}/procedures/search/${searchTerm}`);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return await response.json();
        } catch (error) {
            console.error('Error searching procedures:', error);
            throw error;
        }
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    static validateProcedureData(data) {
        const errors = [];

        if (!data.MEDICAL_PROCEDURE_CODE?.trim()) {
            errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£');
        }

        if (!data.MED_PRO_NAME_THAI?.trim()) {
            errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏´‡∏±‡∏™
        if (data.MEDICAL_PROCEDURE_CODE && !/^[A-Z0-9]{3,10}$/.test(data.MEDICAL_PROCEDURE_CODE)) {
            errors.push('‡∏£‡∏´‡∏±‡∏™‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 3-10 ‡∏´‡∏•‡∏±‡∏Å');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
        if (data.UNIT_PRICE && (isNaN(data.UNIT_PRICE) || data.UNIT_PRICE < 0)) {
            errors.push('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        const maxLengths = {
            MEDICAL_PROCEDURE_CODE: 10,
            MED_PRO_NAME_THAI: 100,
            MED_PRO_NAME_ENG: 100,
            MED_PRO_TYPE: 100
        };

        Object.entries(maxLengths).forEach(([field, maxLength]) => {
            if (data[field] && data[field].length > maxLength) {
                errors.push(`${this.getFieldName(field)} ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô ${maxLength} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£`);
            }
        });

        return errors;
    }

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    static getFieldName(fieldName) {
        const fieldNames = {
            MEDICAL_PROCEDURE_CODE: '‡∏£‡∏´‡∏±‡∏™‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£',
            MED_PRO_NAME_THAI: '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£ (‡πÑ‡∏ó‡∏¢)',
            MED_PRO_NAME_ENG: '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£ (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)',
            MED_PRO_TYPE: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£',
            UNIT_PRICE: '‡∏£‡∏≤‡∏Ñ‡∏≤',
            SOCIAL_CARD: '‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£',
            UCS_CARD: '‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏≠‡∏á'
        };
        return fieldNames[fieldName] || fieldName;
    }

    // ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á API
    static formatProcedureData(data) {
        return {
            MEDICAL_PROCEDURE_CODE: data.MEDICAL_PROCEDURE_CODE?.trim().toUpperCase(),
            MED_PRO_NAME_THAI: data.MED_PRO_NAME_THAI?.trim(),
            MED_PRO_NAME_ENG: data.MED_PRO_NAME_ENG?.trim(),
            MED_PRO_TYPE: data.MED_PRO_TYPE?.trim(),
            UNIT_PRICE: data.UNIT_PRICE ? parseFloat(data.UNIT_PRICE) : null,
            SOCIAL_CARD: data.SOCIAL_CARD || 'N',
            UCS_CARD: data.UCS_CARD || 'N'
        };
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£
    static getProcedureTypesList() {
        return [
            { value: '‡∏ï‡∏£‡∏ß‡∏à‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢', label: '‡∏ï‡∏£‡∏ß‡∏à‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢' },
            { value: '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', label: '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ' },
            { value: '‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡πÄ‡∏•‡πá‡∏Å', label: '‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡πÄ‡∏•‡πá‡∏Å' },
            { value: '‡∏ó‡∏±‡∏ô‡∏ï‡∏Å‡∏£‡∏£‡∏°', label: '‡∏ó‡∏±‡∏ô‡∏ï‡∏Å‡∏£‡∏£‡∏°' },
            { value: '‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û', label: '‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û' },
            { value: '‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô', label: '‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô' },
            { value: '‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏î', label: '‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏î' },
            { value: '‡πÄ‡∏≠‡πá‡∏Å‡∏ã‡πå‡πÄ‡∏£‡∏¢‡πå', label: '‡πÄ‡∏≠‡πá‡∏Å‡∏ã‡πå‡πÄ‡∏£‡∏¢‡πå' }
        ];
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    static async generateNextProcedureCode() {
        try {
            const response = await this.getAllProcedures({ limit: 1, page: 1 });

            if (response.success && response.data.length > 0) {
                const lastCode = response.data[0].MEDICAL_PROCEDURE_CODE;
                const match = lastCode.match(/^P(\d+)$/);
                if (match) {
                    const nextNum = parseInt(match[1]) + 1;
                    return `P${nextNum.toString().padStart(4, '0')}`;
                }
            }

            return 'P0001';
        } catch (error) {
            console.error('Error generating procedure code:', error);
            const random = Math.floor(Math.random() * 10000);
            return `P${random.toString().padStart(4, '0')}`;
        }
    }

    // ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤
    static formatPrice(price) {
        return new Intl.NumberFormat('th-TH', {
            style: 'currency',
            currency: 'THB',
            minimumFractionDigits: 2
        }).format(price || 0);
    }

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
    static calculateTotalPrice(procedures) {
        return procedures.reduce((total, procedure) => {
            return total + (parseFloat(procedure.UNIT_PRICE) || 0);
        }, 0);
    }
}

export default MedicalProcedureService;