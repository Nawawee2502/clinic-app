// services/supplierService.js
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';

class SupplierService {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    static async getAllSuppliers() {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/supplier`);
            const response = await fetch(`${API_BASE_URL}/supplier`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error fetching suppliers:', error);
            throw error;
        }
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™
    static async getSupplierByCode(code) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/supplier/${code}`);
            const response = await fetch(`${API_BASE_URL}/supplier/${code}`);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error fetching supplier:', error);
            throw error;
        }
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢
    static async searchSupplier(searchTerm) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/supplier/search/${encodeURIComponent(searchTerm)}`);
            const response = await fetch(`${API_BASE_URL}/supplier/search/${encodeURIComponent(searchTerm)}`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error searching suppliers:', error);
            throw error;
        }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    static async checkCodeExists(code) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/supplier/check/${code}`);
            const response = await fetch(`${API_BASE_URL}/supplier/check/${code}`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error checking supplier code:', error);
            throw error;
        }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
    static async createSupplier(data) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/supplier`);
            const response = await fetch(`${API_BASE_URL}/supplier`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error creating supplier:', error);
            throw error;
        }
    }

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢
    static async updateSupplier(code, data) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/supplier/${code}`);
            const response = await fetch(`${API_BASE_URL}/supplier/${code}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error updating supplier:', error);
            throw error;
        }
    }

    // ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢
    static async deleteSupplier(code) {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/supplier/${code}`);
            const response = await fetch(`${API_BASE_URL}/supplier/${code}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error deleting supplier:', error);
            throw error;
        }
    }

    // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢
    static async getSupplierStats() {
        try {
            console.log('üîó Calling API:', `${API_BASE_URL}/supplier/stats/summary`);
            const response = await fetch(`${API_BASE_URL}/supplier/stats/summary`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error fetching supplier stats:', error);
            throw error;
        }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    static validateSupplierData(data, isEditing = false) {
        const errors = [];

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™ - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô EDIT ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if (isEditing) {
            if (!data.SUPPLIER_CODE?.trim()) {
                errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢');
            } else if (data.SUPPLIER_CODE.length > 20) {
                errors.push('‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
            }
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ó‡∏±‡πâ‡∏á CREATE ‡πÅ‡∏•‡∏∞ EDIT
        if (!data.SUPPLIER_NAME?.trim()) {
            errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢');
        } else if (data.SUPPLIER_NAME.length > 200) {
            errors.push('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà 1
        if (data.ADDR1 && data.ADDR1.length > 100) {
            errors.push('‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà 1 ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà 2
        if (data.ADDR2 && data.ADDR2.length > 100) {
            errors.push('‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà 2 ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
        if (data.CONTACT1 && data.CONTACT1.length > 100) {
            errors.push('‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
        if (data.TEL1 && data.TEL1.length > 50) {
            errors.push('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
        if (data.DAY1 && (isNaN(data.DAY1) || data.DAY1 < 0)) {
            errors.push('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0');
        }

        return errors;
    }

    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á API
    static formatSupplierData(data) {
        return {
            SUPPLIER_CODE: data.SUPPLIER_CODE?.trim().toUpperCase(),
            SUPPLIER_NAME: data.SUPPLIER_NAME?.trim(),
            ADDR1: data.ADDR1?.trim() || null,
            ADDR2: data.ADDR2?.trim() || null,
            CONTACT1: data.CONTACT1?.trim() || null,
            TEL1: data.TEL1?.trim() || null,
            DAY1: data.DAY1 ? parseInt(data.DAY1) : null
        };
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢
    static formatForDropdown(supplierList) {
        return supplierList.map(item => ({
            value: item.SUPPLIER_CODE,
            label: `${item.SUPPLIER_CODE} - ${item.SUPPLIER_NAME}`,
            data: item
        }));
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö select/dropdown
    static toOptions(supplierList) {
        return supplierList.map(item => ({
            value: item.SUPPLIER_CODE,
            label: item.SUPPLIER_NAME,
            code: item.SUPPLIER_CODE,
            name: item.SUPPLIER_NAME,
            contact: item.CONTACT1,
            tel: item.TEL1
        }));
    }

    // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô CSV
    static exportToCSV(supplierList) {
        const headers = [
            '‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢',
            '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢',
            '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà 1',
            '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà 2',
            '‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠',
            '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£',
            '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï'
        ];

        const rows = supplierList.map(item => [
            item.SUPPLIER_CODE,
            item.SUPPLIER_NAME,
            item.ADDR1 || '',
            item.ADDR2 || '',
            item.CONTACT1 || '',
            item.TEL1 || '',
            item.DAY1 || ''
        ]);

        const csvContent = [headers, ...rows]
            .map(row => row.map(field => `"${field}"`).join(','))
            .join('\n');

        return csvContent;
    }

    // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV
    static downloadCSV(supplierList, filename = 'suppliers') {
        const csvContent = this.exportToCSV(supplierList);
        const blob = new Blob(['\uFEFF' + csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);

        link.setAttribute('href', url);
        link.setAttribute('download', `${filename}-${new Date().toISOString().slice(0, 10)}.csv`);
        link.style.visibility = 'hidden';

        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (SUP + ‡πÄ‡∏•‡∏Ç 3 ‡∏´‡∏•‡∏±‡∏Å)
    static generateCode(existingCodes = []) {
        // ‡∏´‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ SUP)
        const usedNumbers = existingCodes
            .filter(code => code.startsWith('SUP'))
            .map(code => parseInt(code.substring(3)))
            .filter(num => !isNaN(num))
            .sort((a, b) => a - b);

        // ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
        let nextNumber = 1;
        for (const num of usedNumbers) {
            if (num === nextNumber) {
                nextNumber++;
            } else {
                break;
            }
        }

        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™ SUP + 3 ‡∏´‡∏•‡∏±‡∏Å
        return 'SUP' + nextNumber.toString().padStart(3, '0');
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    static filterSupplier(supplierList, filterOptions = {}) {
        let filtered = [...supplierList];

        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        if (filterOptions.searchTerm) {
            const search = filterOptions.searchTerm.toLowerCase();
            filtered = filtered.filter(item =>
                item.SUPPLIER_CODE?.toLowerCase().includes(search) ||
                item.SUPPLIER_NAME?.toLowerCase().includes(search) ||
                item.CONTACT1?.toLowerCase().includes(search) ||
                item.TEL1?.toLowerCase().includes(search)
            );
        }

        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
        if (filterOptions.minCreditDays !== undefined) {
            filtered = filtered.filter(item =>
                (item.DAY1 || 0) >= filterOptions.minCreditDays
            );
        }

        if (filterOptions.maxCreditDays !== undefined) {
            filtered = filtered.filter(item =>
                (item.DAY1 || 0) <= filterOptions.maxCreditDays
            );
        }

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
        if (filterOptions.sortBy) {
            filtered.sort((a, b) => {
                const aValue = a[filterOptions.sortBy];
                const bValue = b[filterOptions.sortBy];

                if (filterOptions.sortOrder === 'desc') {
                    return bValue > aValue ? 1 : -1;
                } else {
                    return aValue > bValue ? 1 : -1;
                }
            });
        }

        return filtered;
    }

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô)
    static async getUsageCount(code) {
        try {
            // TODO: Implement endpoint for counting usage
            console.log(`Checking usage count for supplier: ${code}`);
            return 0;
        } catch (error) {
            console.error('Error getting usage count:', error);
            throw error;
        }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    static async canDelete(code) {
        try {
            const usageCount = await this.getUsageCount(code);
            return usageCount === 0;
        } catch (error) {
            console.error('Error checking if can delete:', error);
            return false;
        }
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    static formatForTable(supplierList) {
        return supplierList.map((item, index) => ({
            no: index + 1,
            code: item.SUPPLIER_CODE,
            name: item.SUPPLIER_NAME,
            address: [item.ADDR1, item.ADDR2].filter(Boolean).join(' '),
            contact: item.CONTACT1,
            tel: item.TEL1,
            creditDays: item.DAY1 || 0,
            ...item
        }));
    }

    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏ï‡πá‡∏°
    static formatFullAddress(supplier) {
        const addressParts = [
            supplier.ADDR1,
            supplier.ADDR2
        ].filter(Boolean);

        return addressParts.join(' ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà';
    }

    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
    static formatContactInfo(supplier) {
        const contacts = [];

        if (supplier.CONTACT1) {
            contacts.push(`‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ${supplier.CONTACT1}`);
        }

        if (supplier.TEL1) {
            contacts.push(`‡πÇ‡∏ó‡∏£: ${supplier.TEL1}`);
        }

        return contacts.join(' | ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠';
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞
    static calculateDueDate(startDate, creditDays = 0) {
        const date = new Date(startDate);
        date.setDate(date.getDate() + creditDays);
        return date;
    }

    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    static formatDueDate(startDate, creditDays = 0) {
        const dueDate = this.calculateDueDate(startDate, creditDays);
        return dueDate.toLocaleDateString('th-TH', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    static isOverdue(startDate, creditDays = 0) {
        const dueDate = this.calculateDueDate(startDate, creditDays);
        return new Date() > dueDate;
    }
}

export default SupplierService;